#Region ;FUNCTION LIST IN FILE ORDER:

;===================================================================================================
; Function........:  CreateGUI()
;
; Description.....:  Creates the main GUI.
;
; Return Value(s).:  Handle to the created GUI.
;===================================================================================================
; Function........:	 UpdateTheme($bEnableDarkTheme = False)
;
; Description.....:  Toggles the GUI between light and dark theme.
;
; Parameter(s)....:  $bEnableDarkTheme	- If true dark theme will be enabled.
;										  If false light theme will be enabled.
;===================================================================================================
; Function........:	 GetStringDimensions($hWnd, $Text)
;
; Description.....:  Calculates the width/height of a string depending on the current font using
;						GetTextExtentPoint32.
;
; Parameters......:  $hWnd - Handle to the window which's font should be used
;					 $Text - The text to calculate.
;
; Return Value(s).:  A $tagSize structure. The X member is the width and the Y member the height
;						of the specified string.
;===================================================================================================
; Function........:  CreateGroupBoxNoText($x, $y, $w, $h, $BorderColour)
;
; Description.....:	 Creates a rectangular box. Similar to CreateGroupBox but without any text.
;
; Parameter(s)....:	 Check the documentation of CreateGroupBox.
;
; Return Value(s).:	 An array of control handles to the created labels:
;						$arr[0] = top label
;						$arr[1] = left label
;						$arr[2] = right label
;						$arr[3] = bottom label
;===================================================================================================
; Function........:  CreateGroupBox($hOwner, $Title, $x, $y, $w, $h, $BorderColour = 0xFF000000,
;								$TextStyle = $SS_CENTER, $TextColour = 0xFF000000, $TextOffset = 5)
;
; Description.....:  Creates a box with a title around a certain area. Similar to
;						GUICtrlCreateGroup with $SS_SUNKEN but without glitched backgroundcolour.
;						Uses the font of the GUI. Use GUISetFont before calling.
;
; Parameter(s)....:  $hOwner		- A handle to the main GUI window returned by GuiCreate.
;					 $Title			- A string which will be in the middle on the top of the group.
;					 $x				- Left side of the box.
;					 $y				- Top side of the box.
;					 $w				- Width of the box.
;					 $h				- Height of the box.
;					 $BorderColour	- Colour of the border.
;					 $TextColour	- Colour of the text (24 bit RGB).
;					 $TextStyle		- Either $SS_LEFT, $SS_CENTER or $SS_RIGHT. Other values
;										will be ignored.
;					 $TextOffset	- Offset of the text in px (left/right). Ignored
;										when $TextStyle is $SS_CENTER.
;
; Return Value(s).:   An array of control handles to the created labels:
;						$arr[0] = top left label
;						$arr[1] = top right label
;						$arr[2] = left label
;						$arr[3] = right label
;						$arr[4] = bottom label
;						$arr[5] = text label
;===================================================================================================
; Function........:  CreateBitmapFromIcon($BackgroundColour, $FilePath, $IconIndex, $Size)
;
; Description.....:  Creates a bitmap from an icon (eg. from the Shell32.dll) which can be used for
;						various things like popmenus or listviews.
;
; Parameter(s)....:  $BackgroundColour	- Backgroundcolour of the bitmap. Should be set to
;											_WinAPI_GetSysColor($COLOR_MENU) most of the times.
;					 $FilePath			- Path to the file containing the icon.
;					 $IconIndex			- Index of the icon within the file.
;					 $Size				- Width/Length of the bitmap. Can only be a square.
;
; Return Value(s).:  On Success - A handle to the bitmap.
;                    On Failure - 0.
;===================================================================================================
; Function........:  DllList_PopUp($hwnd)
;
; Description.....:  Creates and manages the popup menu (rightclick) in the dll list.
;
; Parameter(s)....:  $hwnd	- A handle to the parent control.
;===================================================================================================
; Function........:  UpdateLV($hListView, $ActionID, $Mode = $M_All, $Index = -1)
;
; Description.....:  Updates the items of the specified listview according to the ActionId and Mode.
;
; Parameter(s)....:  $hListView		- A handle to the listview control.
;					 $ActionID		- Identifier of the action to perform (check $A_ID_... values).
;					 $Mode			- Either all or selected indices.
;===================================================================================================
; Function........:  GUI_LV_SubclassProc($hWnd, $uMsg, $wParam, $lParam, $iID, $pData)
;
; Description.....:  A subclass procedure to catch VK_DELETE and VK_SPACE inputs to the listview.
;					 Also handles customdrawing when the GUI is set to dark mode.
;
; Parameter(s)....:  default SubClassProc arguments
;
; Return Value(s).:  By default calls are forwarded to DefSubclassProc using DllCall.
;					 	Exceptions (custom drawing when darkmode is enabled):
;							$uMsg = $WM_NOTIFY:
;								Code = $NM_CUSTOMDRAW and hWndFrom = handle to the listview header:
;									dwDrawStage = $CDDS_PREPAINT
;										Return $CDRF_NOTIFYITEMDRAW
;									dwDrawStage = $CDDS_ITEMPREPAINT
;										Return $CDRF_NOTIFYPOSTPAINT
;									dwDrawStage = $CDDS_ITEMPOSTPAINT
;										Return $CDRF_NEWFONT
;===================================================================================================
; Function........:  GUI_WM_NOTIFY($hWnd, $uMsg, $wParam, $lParam)
;
; Description.....:  WM_NOTIFY callback of the main GUI. Catches various messages
;						sent to the dll list (rightclick, doubleclick...)
;
; Parameter(s)....:  default wndProc arguments
;
; Return Value(s).:  Forwards calls to the internal AutoIt/Windows handler(s)
;						by returning $GUI_RUNDEFMSG.
;===================================================================================================
; Function........:  WM_CTLCOLORLISTBOX($hWnd, $uMsg, $wParam, $lParam)
;
; Description.....:  A WM_CTLCOLORLISTBOX callback to custom draw listboxes (comboboxes) when the
;						GUI is set to dark mode.
;
; Parameter(s)....:  default wndProc arguments
;
; Return Value(s).:  Forwards calls to the internal AutoIt/Windows handler(s)
;						by returning $GUI_RUNDEFMSG.
;===================================================================================================
; Function........:  WM_NOTIFY($hWnd, $uMsg, $wParam, $lParam)
;
; Description.....:  Main WM_NOTIFY callback. Forwards the call to the WM_NOTIFY proc of the
;						main GUI or the	ProcessList depending on the current state.
;
; Parameter(s)....:  default wndProc arguments
;
; Return Value(s).:  Forwards calls to WM_NOTIFY routines and returns their return values.
;===================================================================================================
; Function........:  WM_DROPFILES($hWnd, $uMsg, $wParam, $lParam)
;
; Description.....:  Handles dropped files to the dll list.
;
; Parameter(s)....:  default wndProc arguments
;
; Return Value(s).:  Forwards calls to the internal AutoIt/Windows handler(s)
;						by returning $GUI_RUNDEFMSG.
;===================================================================================================
; Function........:  WM_COMMAND($hwnd, $uMsg, $wParam, $lParam)
;
; Description.....:  Handles changes to the text input fields.
;
; Parameter(s)....:  default wndProc arguments
;
; Return Value(s).:  Forwards calls to the internal AutoIt/Windows handler(s)
;						by returning $GUI_RUNDEFMSG.
;===================================================================================================
; Function........:  WM_MOVE($hwnd, $uMsg, $wParam, $lParam)
;
; Description.....:  Handles changes to the GUI position.
;
; Parameter(s)....:  default wndProc arguments
;
; Return Value(s).:  Forwards calls to the internal AutoIt/Windows handler(s)
;						by returning $GUI_RUNDEFMSG.
;===================================================================================================
; Function........:  WM_PAINT($hwnd, $uMsg, $wParam, $lParam)
;
; Description.....:  Redraws process icon.
;
; Parameter(s)....:  default wndProc arguments
;
; Return Value(s).:  Forwards calls to the internal AutoIt/Windows handler(s)
;						by returning $GUI_RUNDEFMSG.
;===================================================================================================
; Function........:  ResetGUI()
;
; Description.....:  Resets the GUI settings according to the g_ variables.
;						This doesn't include the dll list.
;===================================================================================================
; Function........:  CloseGUI()
;
; Description.....:  Closes the GUI(s) and does some clean up.
;===================================================================================================
; Function........:  UpdateCursor()
;
; Description.....:  Handles cursor change, tooltip and clicks to the GH Banner.
;===================================================================================================
; Function........:  AddFile($Path, $UpdateLastDirectory = False)
;
; Description.....:  Adds a single file to the dll list after verifying that the file is a valid
;						PE file and isn't already in the list.
;
; Parameter(s)....:  $Path					- Absolute path to the file.
;					 $UpdateLastDirectory	- Updates the last directory if set to True.
;===================================================================================================
; Function........:  AddFiles($Path = 0)
;
; Description.....:  Opens a file dialog at the specified path or g_LastDirectory. Files selected
;						in the dialog will be added to the list (if valid).
;
; Parameter(s)....:  $Path - Path to the directory. If empty $g_LastDirectory will be used.
;===================================================================================================
; Function........:  UpdateProcessIcon($TargetPID)
;
; Description.....:  Updates the process icon and g_ExePath in the top left corner when
;						another process has been selected.
;
; Parameter(s)....:  $TargetPID - The process identifier of the new process.
;===================================================================================================
; Function........:  UpdateTargetProcess()
;
; Description.....:  Updates the global variables according to the current GUI settings (eg. after
; 						the ProcessList was used).
;===================================================================================================
; Function........:  CheckProcess()
;
; Description.....:  Quickly verifies whether the specified target process is still active.
;
; Return Value(s).:	 True 	- Process still exists.
;					 False	- Process doesn't exist.
;===================================================================================================
; Function........:  UpdateGUI()
;
; Description.....:  Main GUI function which handles all events and updates the GUI accordingly.
;
; Return Value(s).:  $GUI_RETURN 		- Default return value.
;                    $GUI_EXIT 			- User closed the GUI (mainloop in Main.au3 will stop).
;					 $GUI_INJECT		- Injection event.
;					 $GUI_UPDATE		- User wants to update the injector. This message is
;											returned if the user clicks the version label and the
;											current version is outdated.
;					 $GUI_RESET			- GUI gets reseted. This doesn't reset the dll list.
;					 $GUI_FORCE_UPDATE	- User wants to update/redownload the injector. Unlike
;											$GUI_UPDATE this is triggered by CTRL + left clicking
;											the update label which will trigger the update function
;											even if the current version is the newest.
;===================================================================================================

#EndRegion

#include "ProcessList.au3"
#include "Settings.au3"

#Region Global Definitions


$h_GUI 				= 0

$h_P_Banner 		= 0
$h_B_Close			= 0
$h_B_Minimize		= 0

;Settings
$h_B_Settings 			= 0

	$h_C_ProcName 		= 0
		$h_L_ProcName 	= 0
	$h_I_PID 			= 0
		$h_L_PID 		= 0
	$h_R_ProcName 		= 0
	$h_R_PID 			= 0
	$h_B_SelProcess		= 0
	$h_I_InjDelay 		= 0
		$h_L_InjDelay 	= 0
	$h_C_CloseAI 		= 0
	$h_C_AutoI 			= 0

	;;Injection method
	$h_B_InjectionMethod		= 0
		$h_C_Method				= 0
		$h_C_HijackHandle		= 0
			$h_L_HijackHandle 	= 0
		$h_C_LaunchMethod		= 0
		$h_C_CloakThread		= 0
			$h_L_CloakThread	= 0

	;;Cloaking
	$h_B_Cloaking				= 0
		$h_C_Header 			= 0
		$h_C_Unlink 			= 0
			$h_L_Unlink 		= 0
		$h_C_LoadCopy			= 0
		$h_B_AdvSettings		= 0
		$h_B_AdvSettingsB		= 0
			$h_G_AdvSettings			= 0
				$h_C_Shift				= 0
					$h_L_Shift			= 0
				$h_C_Clean				= 0
					$h_L_Clean			= 0
				$h_C_RandomizeName  	= 0


	$h_B_Reset 			= 0
	$h_B_SwitchTheme 	= 0

;Files
$h_B_Files		= 0
	$h_B_Add 	= 0
	$h_B_Inject = 0
	$h_B_Remove = 0

;Info
$h_B_Info			= 0
	$h_L_Version 		= 0
	$h_B_Help 			= 0
	$h_B_Changelog 		= 0
	$h_B_ToggleTips		= 0

$h_T_MenuBar		= 0
$h_T_TooltipCtrl 	= 0

$l_GUIWidth 	= 800
$l_GUIHeight	= 420
$l_BannerWidth 	= 727
$l_BannerHeight = 60
$l_DllListWidth = 2 * $l_GUIWidth / 3 - 25

$l_WindowTitle 	= "GH Injector V" & $g_CurrentVersion

$l_bBanner = Binary( _
		"0x
		
		
		
		
		"39900F019C1A29A8E7EEEB96F331D5DCD788180A8A6DE80D0CC38475B48FDE6AA1E2AE338191D4DB697E349BF325ABB63AF29E3A65BC274AEB8AB673961A2BF634DD2A4AE7D8A0BCA1F5ACADA2ABEE9DB85AA286BA0929AAE96468678255CAF1BAF104761E2AC346521971041E63ED8D7809595314F4BB254920EFB5353229867BEB767514540ACC20988CB35511BAC4464D8B31C59892C4F124EA49F293C891AEB5B40AC1178B54D2639B2A76C94FD23978B47E0F0C39A430208D0823020F941D479AC9935ADA08F214F1AA28C6250A0EB7A6C4A91C4C641F179980D49D001C493C00F2D8D1E9DD755924AB030EF112F4A2A66EC909EFB28F17A2BC71B4727F3749AA7F131338FCAC2C4F6927E5E4078C9774D94F6F72D56A84FB98E7529FD2AF6DBB24BC26F4F73537FB2F31F963E40E38A90C3CEA71169D8709B77503CD3C6B2FFB5CC59A1729221C430F90823832B0D194E2194904606D9CB7A9954C7A432B3D04A7AD9720325293C4A912458F8250600E31494732E3A3475706BE5C1994FCA2DEBAABA2A71C759D667F2E58A0DE313D834D7AEC56EE0FBD20ABD74C00970E0453460B0815C7176266D4AE2BCA94D5B9C6EB4A7AB8D73BC69C7752C7883245ED329CE84F0616C69EA68A75ED5A948CFF00526DDB8F92D9A4928E25EB67AB834F2E0AC5BE416CF049DD75A31093052B4B4F88C33C61F079E51AE42CAB1A1E9F4CAE04927127524F127B4DAAF78C1779415112E3D723342554794E53C91CE9785DE81A968D4A495195D1A2A5862756197886436FB63767CEBFEDB669EF4A6C3DA5324B552FA30548FD2D28167A7BB61781655CB3D54CC1AB275EB8F14EF70427C68E2C4BF07918686C8659162431CE99DCE08A6485D1731EA189B7DB1BB7E75FF6DBED8DD9F3AFFB6DF6C6EDF9D0FDDB11A1C3B351E83D62C90F7552C122574D295A897764A3C102861A1C7556F92DF6C6EDF9D0FDDB1DE5E577A81ED247998FDEA451B1C7C9A5B1A346ACAAF16AEA9024101F6D0521CDBC71D4D504A8FB8F1B3492B17773999D8E249B464F012213E60E09B5F559473254534F58CF0CD1EA922E5518AF934E66C6454D3A4D250ECDF72D5A27182A05E75F26E9FDD64756ECC08B5C1B3B774F1CF886BFAFC9A238AC97B56AE4A7A463A66F53281122230204D34B81C7872C1554D218AA69668EA29E51C639A171244FA6BD17507CBC2C2F7BB248F757D52C179D452A68D775E13822F0A3900E192AD2592323468658CF1C6D05E17754C949594CE2486788E0CAC3FB9918745E3705244251D4A922C67AC61B1F7F49ECD34504951B35784D81267786056AAB9E491BD90449514989C5123D6D9E82BF676F284E1966A4BFAEE0181EBDDD44D04CBE678C116CF7D5FDB377343A66696F682BA7C3AF774976F754F23FB9C063DB6961D8F8AA2AEF49A368A6DAABD22586682375CB24771DDDD314598120D6D4B3D67DCD6204656249666C4924E2598F1249D4927893C6D4F3524C93C4B72DC901743881341774114C9F7D1C8A54F9472C5514F2C904F03ACB0CD1314922910E647471AAB29D4116A8BDAA24A7BAB6B68621257A61BBA3DA6897A26AE9C2F460BE0686A61F63ABD664CAD9815A9AD9D29E0F532FC88CB2782249EE7AD8615F3C92BA20F29E4D8F4A59D267A1D97A7A4AB543AC152B5D5CED0BFBB0AEADE62398FB35B42CC2E1BC2A629A0ACC0BC970DE80858AF2857AE9DF48AF18570DE43DF7C28F5DA57A79E2A980DEB3EEAA206CF0CC83281246C38AB61A7253DDBB674F532BD2C6B0506D3DDE236BE69204F62A6BC22932A5F14716A23DE491D642BA473B0D2D9EE1DA3D9DBE213C035E09755628C31EFB4779F73B2B7510AF20C78311ADB1AAAAB82862F1A6AADA0BA951476E11D44923799109F2584D2D4AEDA5EA98343494C93536CE4128E0F5955288EA6F3553AF73D3C30C4FA6F26CA6CF785E7399E770B1A0002434F047A434B4B0AE11D3D342BD18A18C0551AEAC598C30B4B1D3ACB2C71B4F2E3BA843B0532C98027226399B004E02D574105E14B7AC54D2644AFA22C696A0600E788B856C3AB87116574628E8432B29C19581C41047020F0B66ABF59D5E181A98A3CD4F50DEDAA20419A273E349082A78988589827A29D478C95512E3FEAC851C7A5458774545153A9F19EA636C3FD488C8E7D02C7B8B355556180AD9D024507BAA5A7398B49C46F67E1802910C4D8B312CCC712CC7124F6927527CB65962629221CCAEBC41FF00F75702343A5B3546343587C29E142F493B7B692118BC12378ED16319399F22E380C629A8E74EA64AB8751DB95D95C798A836C6A2A686997B5EA91CFA121DE39F92C3B80354556BEBEA88F22C588C3D6B4C49C1FF00D34FD25F11171B1624924E249D49278924F136AF6660247A610C23C6264953391E4080E6D78728866609056A3D14EE78224F86497C9B998452E241C021B3430B07A7A35147032F82EB068F28F7F9B79363A621C72DDECAC33A526E254F194C12C8A85BEFE3C857FF000FE02DC3FC8F80F93FCABFFFC400291001000202010500020202030101000000011121003141102051617181A1B1F03091C1D1F1E150FFDA0008010100013F21EA08042112840168A04AB466D49417F0A71C8F4594F47F10CF9AE8FCE61C6F0253D03DA0C5E224ACA4088961224C99E401653523901040994E87A346B304DC8A90646321B44F291FBC364B0A38DC1AC4931A927AEDC03765BA856C0D67F43D6FF1E7C740F0EC79BCE81084040614588D2308EF290EC3F06A708C9184793A0C0508251E3CA9C3DB5D7C6476413CECE7F2B1D9E5E9510AD45AD4E07464083E01DFE52F01B8EC3EED498D0C8F0E3830A30A290481" & _
		"F92C8C31DA06BBE2ED909B584CDFBE80CFC160A164044D1C0F643627553D8C205960460F346B5AD26E416C26118BBA5EFD70AB6412EBBA2D680DAF80C7B2B19ED94FE4A7274D5BAC9821112B082528B94305EE4B3E2E601C7D0C49CA094D3BD777A9E273424EAB2697BC84AF2A80B35E86C079B3B3FE503DAD01ED74739F618AD5323421A90787794EC560408979F4E67130E6ECD75482C7DA3419560E05283B590A54EE390B84968888F6A9622B28802E2129416426C40A5DCD90195443042D0D94736A157DAE70FB5F44232781A4864F38A2D1DDAA5D5C47E126A9B40F0940B654223844D278ABF656EF3CFD7F9ECF4ADF1E9BF3ADE46E261F531C9F8C74FCC6B2D158F0D0751CF4463B066D4B73F8540A2A4C92FF0058C025A40CD71261CFFC0A528FFC484911C67CB5141200258888E7EF37CACBF9B6FBBEA4896EDDE5634AAD182EA3CBDF4077E73623E94F949C899C0DC398D3F099E2271BFCC39C1418920C5447A463055E900E302A0EC214DAAD17471F39BF3D58E0919133373889509830DFA40216E4898EC8B6751DE027427B4CDA862613A6EF5C78FC2DB3216FA26B76B663CB84EE467C3825BC3AA52B2BA357D0D7D89CA8B80043910A306030A502A141AC852078003E274FFE1F5680F2AD072E1BFF0054E0DB04D4045AC44650A4B053980056D8E2169E1A50EC809FF39A1F0C0F7E12C9BB6E9070C78E14E595E1DCD00DC4F5F8ECFF009EF0800006000457057DF795BA1D7136836202091FAEB28528264DD41A6464E95628A4C074181831A174390CCA164190599FF5677D218F4272CDB050831AAA859A12201D1D2D18AE5630198157F30645A4E7204FB644D8F87060564D4B08FB9ACBC28F970E6F3C184B7105E735345800D00AD0C606414AC901A41AC95F92E0504ED4B671C3C2F2696E322D852C0A1CF12D6F966FCAC9ED7059008160C2950609261830782CB79C1260C196278A1B8860269CA65F10443047218D909E4E834EE1B3B110715532082997299EA6C211BC02A05CA8E10B3021AF282CB14C088FA15D75D80421A5344A0968DB59559AE750BE2A900A74667B26542522AB954153204F494F3F5FE7B9C9B74FC7B29FF7FEB2464B6C4A393B2D926F7FC4C2B05DEA988DC18224694E1A4BC7E9CFFD127E84FF001DC2A8CD74656F08236854E4E383A2A448429281532B3801CC24F0E639BE32080E33DD5E89EB18F6E097B2C877B30324F2DDA3FBCF0F422E5A52A52328849724F7A39C44B108DFF38838F30E22DA6248891044751E68F867F71FDBF8E30FB993D76D303E9B8EEE823F281207200A11BECDE6A64094044A49425259243BB6D6D5DABB59E5EC3F7CFCC95A73122997D53F1BB210D270A6F2CE0769A1A2F3760A3506CB676D7864392CA6D01E439C7469A8F99C373309C26D22158A25BAF2836A2190201889D4272029284C50991CE00021A64649326846F208B089B171D75C537FA821DA0D7DCE768A66D95BBDF794F3F5FE7B9C9B74FC7B69B23B4B9194FCC9EA986A01ADEB55479282E1CFF791BF89F48F7E7A66E3F9DD698613AA425D77567561FB30DBDBF290C3AD520CB5E9E58178D9B34FBF9BB2CE3D7B367F77FECDBFAC34558F38AF7210C84A20304BD96A547CA921BECE000AAF1819C1D0993D0A8AA7E0C3288F05814988B12E039A40AD625ED3C2E759BBA485BADCBDBFDE78729099C8FC14CAC4BAC0CBC039D7A0A51759C1BE6D4A44B0915242A5EC1E68F874C6651CCBD640490F1827B84CC6D5B37D875EC6FC904D1090AB72EC2EC4CB51DD7EFE06BCFC6227E41C7E6DF057B41B956D26DF91E3E53F843C7A27E876A4E310E6213BF227D8E31A9F5386267D91449E21F985061921253130434893468005C75D2533320383D22F35C472F295C60A3F0116C1691D875C6D708CFF001FEC6724C648886BD4744090019283722E0A92C99C3CEFB6EADFF79E896BC5FF002E425346D819F5B0879693F2D679FAFF003D9FBEFDB7436E9F8F6D31AB08C488BCF73A520AB9DFF858569580AC9E39009D480A4B793708A9DC450EE63146B0EF906C1E0BE5E2B1DE1131A1B86812858BC454688F28013C7C23CFAC9D224D8EAC82C44C84F057B0C07ED10B25285E314A41AE16EF3C1C27B7FBCF0E0F083172630470A39247DD707942A420F2CD53226BA9878E8C679B2E688A2223089089C23A4F1D479A3E1D71CF2AD867A9D8C84B8241125A062B81DD017998BA6F34EF619552C64C7E4A1292EAE07B9C9C84DBBAADB9E85554BCE2D80086A9D0DC434A2D9B7CF278130E3A7C8A4003F849C99C8ABE101CDAC3088211DAE21440614103C4BBE49438CE7B3A4BE2918D768435D02F81A4EF6B00E30333BA2F11F2D80384B1112C525306937138FA426F849FC0606E0116E28D5E246822320A4F1A06AB2472349039576D58A64E253F9C359188A2139752A4F9C674461443CC0F3D49223A64CBCA1B12808D081C90761806CC53035A9F1FC61F23A60A29A4095164604D546F6FC35CFEB03024973B817C8424882C757F04092BE106D50183C35A40F1221346E5D0DBA7E3D94E4E04481007ED4921414E4B523B295F3C6D865BFC0C2B6B01FBF9024201008C191F7A8D9C54AF19733320490BAF2469A48AB2A32AB967CF52B9D0B1E9581663E398266082B0730808E913CE524BA016611A2CDE4D446CB1244BEAF4403A30F9BA615039BF384120E0720041127A919152741D080BD84B9094FC80A0D10D6CA5C1517FCC628F031402243D079A3E1D98C242D5D8C1A2061057309825810116D0E4264561A2AD68926AA509A2CD24385790AE10D844C3D16752127E2083240E3B5649EC6E14EFB40AFB7A02402896289B6B596D14E77D41" & _
		
		"2A186FA662797F3258114036B5D4CB0C8F2AD605B08F45422912EC0D1D2739FF00AEF47BDFF7BC9B6C5CD771026E8310BF446360B6A957BB37448C2A0080A2441A29683A7CEB03B700B00001268014BCAE2784A455426E3205138E9548468D609CDD8B03D450E129F2E250E609188C5009480B00DA0E01522D382C8AE45635C09B96C1A2833AF92FE598F19D472A227ABF0F454424DD744C3D970C6A46AF13480D154344CAE23DA5CA021041086C6638E424BDA301BC961E239E1AAD0A446718D42F70340F62A00051655C7260B81EEBC5F32EA4A9A05796AA9F2A55DBE7111293481A49F68A0C3056781DBD561C5CE770774BDD14E5A90A8BD020F66F3C268C025D6D20C59B28650981804C28DEB627829108A1A3479A5226FE8EC975415080097B08009D50E4436502940284250A9A987028A3F1DAD769C69DE2009BFB4A4CD9E7F46DDDB9A7EE3D3D80679E13622889B426C476270E3B7375ADDE441A0B5AFF00C394ABAEBD9548F19F8899A799152793649E5D712AE88CC082888C4441447D2BF3C767FD6B7FF8F0FA75D005578A4D145A1CBC10AF8DCDD360E86695956E9FC20CC073A924CBA097D9A69F57919F91CA0177843620C3C2C7BDAA00B496D5C18912678C176E07B9A5139BCF4A089D398525C30D197546FDC7A337E6FF00071AE26DE3CFFC8E6DA5336276010536C602B44D68CC2CC5002765DACE5113099675AB46E38AA514282A4A8D946AAAAAAB6F66A77C35609E9F8F2E294016B0A9A17CEBF4E845862239C0C9365604BBA35565A00BB3DA8442F6A93A3E27688B8D4440DE9688004A920211B6E058C7C8A6A904C2BD749D6396BACCC1871E49222C105C1F08DC740AC36A1F615E25A540AC47D437376031D1540573E80C302829E0E3BF679FD1B776E69FB8F4F68193842C355142C3116DA263FB73C0954AE6D0C12989B2FE8272AA3D04DA280B7A5DA8205E114F5D5704B9EE2A9A34E325F0B33748B4EDF29D04A9F342315778E4DDDB4E2DE1E460BD4E9D3CB3F3A5DA0216252145094B8DB649DD9A6A0FB43D1280C12B89C2B5D1705000000000F01A3F18AEB5238A8BD0A836B8DA7C2DDA5962A1FAB998C08511888A40C0FC2D2B35B556C6FA0422BC776AB890836B62B99A9C6C2AAF3292992E922F618D1F9CC4D7D3248ABD637EE3D1D313C371A16E034C8C34516D7F5CB21518D12FAA17544F4DFD26378806D73901C1AA271DE4A0EC428CE6793627A3870AE06010082251D91C8C840EC0E75F157F36023371C7E6747405D820790813E7B44000641FD9B4D03618D18443810FA05C0B818F42A02A3759E594818962CB5A14F09B0646831296244F84F09EBFD62C17D0BFD6090E8E005F48BD14A84CC8D074AA30A0A0A516EC60894E1DF547E6E4A83C10E975C9ADE1DE3310C007444A2784FAE9B2844D12EEA0333102860C0A801D9003040BCA1A29267EFBFEF04AB47364F564034372C91C980A882F9407CA69B33CFE8DBB0250954F900678E7FCF3E7A34FDC7A7B4091DAE4EB7069B48D88831EE2794E7E1FE12A4FBEE85D0103C7BD00DF4374B154144434A9BF58609CF9B9F15807F47BECFDD7CBAF1BBF7CBB5C42FA937AD05790D52D0B95C21E74F2D4C731F85559AF8207C16E1E2ABF388CA4215C36E242D80DAD21036608AB40742D997700A822CA3B0EA2C6002A95E7363BEA203D3DDAA8FF002A769020E691B97F5CB5BAA60AB95AAAFC9A0C8FCB6BE5C256CE5C8A205408A04444B3AC6FDC7A3AE22D90AA7C20621E2706D858008A81ADD0103AAAED66B3E6158F298BA32EBA29C4E225E30436A0EFA08B040A15003AAF40AA84C7F08E30CF0A735A6862B1108A27C46A11A7660B49E0BCFF003408566E0EC0CCFD108811001082D442602CDBB53A5A3B9055B0763054E0A04379F6AEA434128C1802B6836A189C4BC098AA04F48C24695D4900B33486BFBAB074D09F195723214EB8ED50153C68586D7E2826A34AE86BD064D38DAD1E68A0D63E50B40B9006213A571514040A6482229126FA800A087B1227F91C50AE5B57682DF016ECB1E8B418182A8007B540A17985600FB988DDE10551048491FCE086B9C6B0AA5637311147491EAB1AE10A86284015530D756477B81F888918F469FB8F4F6017EC030A84C0DB14D8AF02FE8898972C6451A3F8794AA815400AAB00F6BE0F972083A60E246463A42EFBDFB49AD9A43DC662108B2657E6130F1D1592AECFBE8DA8C765B6A449A3D021F754D36909D22010181524404E6E1CCD4B8088008011D889A44D89A7F3D35E39C2CB8028485B59C32B2A9D560744C13AC01B97A2383D62251CEFE7CDF9EA0B932E55868BC91E91E08338044E91BF71E8ECC43677344D9DECE0C6D29962E0DE571D271926B330AB37398BF27EDF8C0F66ED86941E762550293DBA05A8BFA697AA972AA945AA83854E8273F8537815F90A2268402222511A27B1F27C9D51338C40000A840054802B8FD76AB483896825D21886089E0F8B99735DCBA97FBF080891619500A8628D2F21B4D8383BCC001E0B98439A487555228263FF00CA021BBED74A860902AEC63A942A90A8317EB692340DEABC40744DCDF2C3783B9AF719E9E30730C6004282D1305105514EC475E5474055539B1B63A21A0684859069E20277A5DC0027650DF80238091EC87B4E1A9A2613044CB17A4F8ADD4420513310522A5B52AAAB5556F4444C5219403DD4401126EB07542AA15B042B054700813C1CD281B5F07233102E0DE43C32623E54401F39D29272A2855571F557EB8371F2A1A3A9A7050F627F64C0D437530C2A9EED09A09DD90D4BBC526DFF00732EEA80B0422A115058D37C8928AD41880C2F4E272DAEEF44CDCF7387C0EC" & _
		"44F345D81A686CA2CB06AE12B2063B69451214E802505432B0C8FE9B960975981A70E69AA0AFAB6C23A563D17ED98D3C6302F50A8228701819C711C64999E315B65F50EAEDDAD010C320A0232A50E3121180B1E3024145495AC1C5DC3AF7D530CF9662B9AA8C4EA0A5C8500F634CBF7EC464F998B8A612C1280516141F6A3A289352259619BFABA7678CC4B697B89D730781A190E08FCD53382370B1988038A1A1B56D4925254E4A7A96B904E4DA2CAB2B2FEC943E85105154B7B433A23C1417C757CF4036F68C0955B107228D33B86B2552E57809279727B8CF84943D32F6118A7A66CFF591DEA41080273512E9D85AD825ECF1F461AC3C92DAE368D46C1855565170E3E9409090B13F18569C3071BA0D52518980043F39D6A701762C66540DC25876E9C1C202FB0AA4B4616E71B0C51723FF00E70A6653B0C26DF7A7625646416324135AE72A0B56082218E53C220513B859102E349586D611888608A68AB50929D0132145FDCCA5E62B311013A16D03DD6317D6412A82A95B89EFB5BFF2C2229AD36AF2F660B0B5C4F9A139233235F5704C5BA9B0DD646E2919C14296011B09546BD69B5D61B11902B29FDB316898A4AE428AA8BECE2B14DF31028212BD5CBB9AF4715B983D77C8055A5A3746020E7C91EB3E9990EAB887927286BDAA6D0BED07003803E80FC76A0F20FD83F9C0380FA03F07FF00093AEFB53FB45CFD1B0F41FCEF3E4A9576AAAAAF2ABB4ED76D7AB106D341F90E2352F617FB01EC010002F07CFEF9EAA720FD83801C01F407E3B54E43F60FE7003803E80FC7F27FFFD9" _
	)


$l_bLulIcon = Binary( _
		 "0x
		 "7CAFF7389B1FF7283A8FFB4D0F6FFB0CAF7FFADC6F3FFABC3F5FF4A5F7AFF213440FF27343E812C4F6600292C3400000000000000000000000000000000000000000000000000A6C8FF007992C100B5D6FACEC2E8FFFF759CC9FF446698FF436898FF99BAE7FFB7D6FFFF6077A5FF2C3B58FF6C809CFFC5DEF6FFC6E5FFFFAFCBF7FFAFC9F7FFB1C9FBFF4D6282FF1C2F3DFF2F3E4B563A4E5D001821280000000000000000000000000000000000000000000000000069758700A3D0FF008EACD0036D95C5EF3C5E8FFF698ABFFF5B7CACFF6986B4FFBCD9FFFFBBD5F9FFC0D8F6FFD6F0FFFFD4EEFFFFC9E5FDFFB8D5FAFFABC6F8FFAECAFDFF596E91FF1B2D3BFF293844193242510000000000000000000000000000000000000000000000000000000000000000003841570088BDFF0059759E586587B8FF617EADFF293A53FF7F98BFFFC3E1FFFFCBE7FFFFCAE6FFFFCBE6FEFFCEE7FDFFC8E2FAFFB8D5F8FFABC8F8FFADC8FDFF52678BFF20303DFE152029001B2936000000000000000000000000000000000000000000000000000000000000000000000000003E526C001F2A3C00506687C5657D9EFF98B4D6FFBEE0FFFFBFE2FFFFC3E3FBFFBFDDFAFFC1DEFAFFCCE7FBFFC6E2FAFFAECBFBFFACC8FFFFA6BDF6FF3A4C69FF1C2C37FF212B34042A3741000000000000000000000000000000000000000000000000000000000000000000000000001A273A00A2C5F500617AA019AAD0FCFEC2ECFFFFBFE3FFFFBBE0FAFFBEDFFBFFBBDEFAFFBDDDFAFFBCDAFAFFB4D3FBFFB1CEFFFFB4CEFFFF64769FFF142331FF1F2F39EA20292E0027343F000000000000000000000000000000000000000000000000000000000000000000000000000000000028436A00FFFFFF0086A9DF35B2D8FFFFBBDDFFFFBFE2FAFFC5E9FBFFC1E5FBFFBBDFFDFFBBDCFFFFBFDAFFFFB3CEFFFF6A80AEFF14212EFF1C2834EC1F2D374D0000000017252E00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000089ACDD0000000000AACCF827B5D7FFE0C7E6FFFFDEFFFFFFF2FFFFFFDBFFFFFFCDEEFFFFADC6FFFF536891FF111F2EFF131D28BF20252F0023293B002A2D350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000626F9000FFFFFF00B4CEFF00C8E7FF57DBFFFF95ADC8E1F692ADCEFF6F86AAFF2A3D59FF0D1928FF182732FF1E2A363A2838470008161C000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B320000063F0000000C8D000918FF0F1F2DFF1B2936FF121E29FF121D28A9121E260016252E00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001C2C38000C131C0018273694152633FC0F1926DC101823630C0D15000F141E000000000000000000000000000000000000000000F803FFF0F0007FF0F0001FF0E0000FF0C00007F0C00007F0E00003F0F00001F0F80001F0F80000F0F80000F0F80000F0F8000070F8000030FC000030FC000030FE000030FE000030FF000030FF000030FF800070FFC00030FFC00070FFE00070FFF001F0FFFC01F0FFFF03F0FFFF87F0" _
    )

$l_BannerPath 		= @TempDir & "\GH Banner.jpg"

$l_LulIconPath			= @TempDir & "\lul.ico"

$l_HoverProcIcon 		= False
$l_HoverProcIconPrev 	= False
$g_ExePath				= "No process selected."

Global $DropFileBuffer 				= 0
Global $g_DllList_SortSense[5] 		= [False, False, False, False, False]
Global $g_DllList_ColumnWidth[5] 	= [0, 0, 0, 0, 0]
	$g_DllList_ColumnWidth[0] = 18
	$g_DllList_ColumnWidth[1] = 120
	$g_DllList_ColumnWidth[2] = 2 * $l_GUIWidth / 3 - 240
	$g_DllList_ColumnWidth[3] = 77
$g_DllList_HeaderText				= "|Filename|Path|Architecture| "
$g_LV_HeaderTextSplit				= _StringExplode($g_DllList_HeaderText, "|")
$g_h_DllListHeader					= 0
$GUI_RECT_Buffer					= 0
Global $g_LV_XY[2] 					= [0, 0]
Global $g_LV_MouseXY[2]				= [0, 0]
$g_LV_PrevHoverIndex				= 0
$g_DllList_HoverHeader				= 0

$l_IgnoreInputChange 			= False
$l_ProcIconIndex				= 0
$l_DoubleClickedDll				= -1
$l_UpdateProcess				= True
$l_ProcessAlive					= False
$l_AutoComplete					= False
$l_ProcessListActive			= False
$l_TargetProcessArchitecture	= 0
$last_tick_250					= 0

$b_HoverClose = False
$b_ClickClose = False
$b_HoverMinimize = False
$b_ClickMinimize = False

$h_P_ProcIcon = 0
Const $g_PI_INDEX_Background_Light 		= 0
Const $g_PI_INDEX_Background_Dark 		= 1
Const $g_PI_INDEX_Inactive	= 2
Const $g_PI_INDEX_Invalid 	= 3
Const $g_PI_INDEX_Console 	= 4
Const $g_PI_INDEX_LUL		= 5
Const $g_PI_INDEX_Valid 	= 6

$h_User32_dll			= 0
$h_Comctl32_DLL			= 0
$h_GUI_LV_SubclassProc 	= 0
$ph_GUI_LV_SubclassProc = 0
$h_D_SelAll 			= 0

Global $h_PM_DllList_All[2] = [0, 0]
Global $h_PM_DllList_Sel[2] = [0, 0]

Global Const $M_Selected	= 0
Global Const $M_All			= 1

;$M_Selected
$A_ID_Toggle 		= 0
$A_ID_Activate 		= 0
$A_ID_Deactivate 	= 0
$A_ID_Select		= 0
$A_ID_Delete 		= 0
$A_ID_Open 			= 0

;$M_ALL
$A_ID_ToggleAll 	= 0
$A_ID_ActivateAll 	= 0
$A_ID_DeactivateAll = 0
$A_ID_SelectAll		= 0
$A_ID_DeleteAll		= 0
$A_ID_DeleteInvalid = 0

;why the fuck is tagMSG not AutoIt standard in WinAPIEx???
Global Const $_tagMSG = "HWND hwnd;UINT message;WPARAM wParam;LPARAM lParam;DWORD time;ptr pt"

#EndRegion

Func CreateGUI()

	FileDelete($l_BannerPath)
	FileWrite($l_BannerPath, $l_bBanner)

	FileDelete($l_LulIconPath)
	FileWrite($l_LulIconPath, $l_bLulIcon)

	If (@AutoItX64) Then
		$l_WindowTitle &= " (64-bit)"
	Else
		$l_WindowTitle &= " (32-bit)"
	EndIf

	$h_GUI = GUICreate($l_WindowTitle, $l_GUIWidth, $l_GUIHeight, $g_MainGUI_X, $g_MainGUI_Y, $WS_POPUP, $WS_EX_ACCEPTFILES)
	If (IsAdmin()) Then
		_WinAPI_ChangeWindowMessageFilterEx($h_GUI, $WM_DROPFILES, $MSGFLT_ALLOW)
		_WinAPI_ChangeWindowMessageFilterEx($h_GUI, $WM_COPYGLOBALDATA, $MSGFLT_ALLOW)
    EndIf

	$h_D_SelAll = GUICtrlCreateDummy()

	$h_P_Banner = GUICtrlCreatePic($l_BannerPath, 0, 0, $l_BannerWidth, $l_BannerHeight, Default, $GUI_WS_EX_PARENTDRAG)

	GUISetFont(17, $FW_BOLD)
	$h_B_Close 	= GUICtrlCreateLabel("×", $l_BannerWidth - 1, 0, $l_GUIWidth - $l_BannerWidth + 1, $l_BannerHeight / 2, BitOR($SS_CENTER, $SS_CENTERIMAGE))
		GUICtrlSetBkColor($h_B_Close, 0x2D2D2D)
		GUICtrlSetColor($h_B_Close, 0xD0D0D0)

	$h_B_Minimize = GUICtrlCreateLabel("–", $l_BannerWidth - 1, $l_BannerHeight / 2, $l_GUIWidth - $l_BannerWidth + 1, $l_BannerHeight / 2, BitOR($SS_CENTER, $SS_CENTERIMAGE))
		GUICtrlSetBkColor($h_B_Minimize, 0x2D2D2D)
		GUICtrlSetColor($h_B_Minimize, 0xD0D0D0)


	GUISetFont(12, $FW_BOLD)
	$h_B_Settings = CreateGroupBox($h_GUI, " Settings ", 10, 80, $l_GUIWidth / 3 - 15, $l_GUIHeight - 95, $C_GUI_Border[$g_DarkThemeEnabled], BitOR($FW_BOLD, $SS_CENTER))

	GUISetFont(8.5, $FW_NORMAL)

		$h_L_ProcName = GUICtrlCreateLabel("Process:", 20, 105, 45, 20)
		$h_C_ProcName = GUICtrlCreateCombo("", 85, 102, $l_GUIWidth / 3 - 100, 20, BitOR($CBS_AUTOHSCROLL, $CBS_SORT, $CBS_DROPDOWN))
			GUICtrlSetData($h_C_ProcName, $g_ProcessnameList, $g_Processname)

		$h_L_PID = GUICtrlCreateLabel("PID:", 20, 135, 25, 20)
		$h_I_PID = GUICtrlCreateInput($g_PID, 85, 132, 40, 20, $ES_NUMBER)

		GUIStartGroup()
			$h_R_ProcName 	= GUICtrlCreateRadio("", 65, 102, 15, 20)
			$h_R_PID 		= GUICtrlCreateRadio("", 65, 132, 15, 20)

		If ($g_ProcessByName) Then
			GUICtrlSetState($h_R_ProcName, $GUI_CHECKED)
			GUICtrlSetState($h_I_PID, $GUI_DISABLE)
		Else
			GUICtrlSetState($h_R_PID, $GUI_CHECKED)
			GUICtrlSetState($h_C_ProcName, $GUI_DISABLE)
		EndIf

		$h_B_SelProcess = GUICtrlCreateButton("Select process", 156, 131, $l_GUIWidth / 3 - 170, 22)

		$h_L_InjDelay = GUICtrlCreateLabel("Delay:", 20, 165, 35, 20)
		$h_I_InjDelay = GUICtrlCreateInput($g_InjectionDelay, 65, 162, $l_GUIWidth / 3 - 80, 20, $ES_NUMBER)

		$h_C_CloseAI 	= GUICtrlCreateCheckbox("Close after injection", 65, 185)
		If ($g_CloseAfterInjection) Then
			GUICtrlSetState($h_C_CloseAI, $GUI_CHECKED)
		EndIf

		$h_C_AutoI = GUICtrlCreateCheckbox("Auto", 185, 185)
		If ($g_AutoInjection) Then
			GUICtrlSetState($h_C_AutoI, $GUI_CHECKED)
		EndIf

		GUISetFont(9.5, $FW_BOLD)
		$h_B_InjectionMethod = CreateGroupBox($h_GUI, " Method ", 15, 220, $l_GUIWidth / 3 - 25, 70, $C_GUI_Border[$g_DarkThemeEnabled], $SS_LEFT, $C_GUI_Text[$g_DarkThemeEnabled], 8)
		GUISetFont(8.5, $FW_NORMAL)

			$h_C_Method	= GUICtrlCreateCombo("", 20, 235, 121, Default, $CBS_DROPDOWNLIST)
				GUICtrlSetData($h_C_Method, "LoadLibraryExW|LdrLoadDll|ManualMap", "LoadLibraryExW")
				_GUICtrlComboBox_SetCurSel($h_C_Method, $g_InjectionMethod)

				$h_L_HijackHandle = GUICtrlCreateLabel("", 150, 235, 100, 20)
					GUICtrlSetState($h_L_HijackHandle, $GUI_DISABLE)
			$h_C_HijackHandle = GUICtrlCreateCheckbox("Hijack handle", 150, 236, 100, 20)
			If (NOT $g_RunNative) Then
				GUICtrlSetState($h_C_HijackHandle, $GUI_DISABLE)
				GUICtrlSetState($h_L_HijackHandle, $GUI_ENABLE)
				If (BitAND($g_InjectionFlags, $INJ_HIJACK_HANDLE)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_HIJACK_HANDLE)
				EndIf
			ElseIf (BitAND($g_InjectionFlags, $INJ_HIJACK_HANDLE)) Then
				GUICtrlSetState($h_C_HijackHandle, $GUI_CHECKED)
			EndIf

			$h_C_LaunchMethod = GUICtrlCreateCombo("", 20, 260, 121, Default, $CBS_DROPDOWNLIST)
				GUICtrlSetData($h_C_LaunchMethod, "NtCreateThreadEx|Thread Hijacking|SetWindowsHookEx|QueueUserAPC", "NtCreateThreadEx")
				_GUICtrlComboBox_SetCurSel($h_C_LaunchMethod, $g_LaunchMethod)

				$h_L_CloakThread = GUICtrlCreateLabel("", 150, 260, 100, 20)
					GUICtrlSetState($h_L_CloakThread, $GUI_DISABLE)
			$h_C_CloakThread = GUICtrlCreateCheckbox("Cloak thread", 150, 261, 100, 20)
			If ($g_LaunchMethod <> 0) Then
				GUICtrlSetState($h_C_CloakThread, $GUI_DISABLE)
				GUICtrlSetState($h_L_CloakThread, $GUI_ENABLE)
			ElseIf (BitAND($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)) Then
				GUICtrlSetState($h_C_CloakThread, $GUI_CHECKED)
			EndIf

		GUISetFont(9.5, $FW_BOLD)
		$h_B_Cloaking = CreateGroupBox($h_GUI, " Cloaking ", 15, 305, $l_GUIWidth / 3 - 25, 65, $C_GUI_Border[$g_DarkThemeEnabled], $SS_LEFT, $C_GUI_Text[$g_DarkThemeEnabled], 8)
		GUISetFont(8.5, $FW_NORMAL)

			GUIStartGroup()
				$h_C_Header = GUICtrlCreateCombo("", 20, 320, 93, Default, $CBS_DROPDOWNLIST)
					GUICtrlSetData($h_C_Header, "Keep PEH|Erase PEH|Fake PEH", "Keep PEH")
				If (BitAND($g_InjectionFlags, $INJ_ERASE_HEADER)) Then
					_GUICtrlComboBox_SetCurSel($h_C_Header, 1)
				ElseIf (BitAND($g_InjectionFlags, $INJ_FAKE_HEADER)) Then
					_GUICtrlComboBox_SetCurSel($h_C_Header, 2)
				EndIf

				$h_C_RandomizeName = GUICtrlCreateCheckbox("Randomize file name", 130, 321, 120, 20)
				If (BitAND($g_InjectionFlags, $INJ_SCRAMBLE_DLL_NAME)) Then
					GUICtrlSetState($h_C_RandomizeName, $GUI_CHECKED)
				EndIf

				$h_B_AdvSettings = GUICtrlCreateButton("Advanced options", 18, 345, 97, 22)

				$h_C_LoadCopy = GUICtrlCreateCheckbox("Load DLL copy", 130, 345, 120, 20)
				If (BitAND($g_InjectionFlags, $INJ_LOAD_DLL_COPY)) Then
					GUICtrlSetState($h_C_LoadCopy, $GUI_CHECKED)
				EndIf

		$h_B_Reset = GUICtrlCreateButton("Reset settings", 25, $l_GUIHeight - 43, $l_GUIWidth / 8, 22)

		$h_B_SwitchTheme = GUICtrlCreateButton("", $l_GUIWidth / 3 - $l_GUIWidth / 8 - 20, $l_GUIHeight - 43, $l_GUIWidth / 8, 22)
		If (NOT $g_DarkThemeEnabled) Then
			GUICtrlSetData($h_B_SwitchTheme, "Dark theme")
			GUICtrlSetColor($h_B_SwitchTheme, $C_GUI_Text[1])
			GUICtrlSetBkColor($h_B_SwitchTheme, $C_GUI_Ctrl_Button[1])
		Else
			GUICtrlSetData($h_B_SwitchTheme, "Light theme")
		EndIf

	GUISetFont(12, $FW_BOLD)
	$h_B_Files = CreateGroupBox($h_GUI, " Files ", $l_GUIWidth / 3 + 5, 80, 2 * $l_GUIWidth / 3 - 15, $l_GUIHeight - 143, $C_GUI_Border[$g_DarkThemeEnabled])
	GUISetFont(8.5, $FW_NORMAL)

		$g_hDllList = GUICtrlCreateListView($g_DllList_HeaderText, $l_GUIWidth / 3 + 10, 95, $l_DllListWidth, $l_GUIHeight - 200, $LVS_REPORT, BitOR($LVS_EX_FULLROWSELECT, $LVS_EX_CHECKBOXES, $LVS_EX_FLATSB))
			$g_h_DllListHeader = _GUICtrlListView_GetHeader($g_hDllList)

			For $i = 0 To 4 Step 1
				_GUICtrlListView_SetColumnWidth($g_hDllList, $i, $g_DllList_ColumnWidth[$i])
			Next


			LoadFiles($g_hDllList)

			$g_LV_XY[0] = $l_GUIWidth / 3 + 10
			$g_LV_XY[1] = 95

			GUICtrlSetState($g_hDllList, $GUI_DROPACCEPTED)

		$h_B_Add 	= GUICtrlCreateButton("Add files", $l_GUIWidth / 3 + 15, $l_GUIHeight - 95, $l_GUIWidth / 6, 22)
		$h_B_Inject = GUICtrlCreateButton("Inject", 2 * $l_GUIWidth / 3 - $l_GUIWidth / 12, $l_GUIHeight - 95, $l_GUIWidth / 6, 22)
		$h_B_Remove	= GUICtrlCreateButton("Remove selected files", $l_GUIWidth - $l_GUIWidth / 6 - 20, $l_GUIHeight - 95, $l_GUIWidth / 6, 22)

	GUISetFont(12, $FW_BOLD)
	$h_B_Info = CreateGroupBox($h_GUI, " Info ", $l_GUIWidth / 3 + 5, $l_GUIHeight - 51, 2 * $l_GUIWidth / 3 - 15, 36, $C_GUI_Border[$g_DarkThemeEnabled])
	GUISetFont(8.5, $FW_NORMAL)

		$h_B_ToggleTips	= GUICtrlCreateButton("Disable Tooltips", $l_GUIWidth / 3 + 15, $l_GUIHeight - 43, $l_GUIWidth / 8, 22)
		$h_B_Help 		= GUICtrlCreateButton("Help", 37 * $l_GUIWidth / 72 + 10 / 3, $l_GUIHeight - 43, $l_GUIWidth / 8, 22)
		$h_B_Changelog 	= GUICtrlCreateButton("Changelog", 25 * $l_GUIWidth / 36 - 25 / 3, $l_GUIHeight - 43, $l_GUIWidth / 8, 22)
		$h_L_Version 	= GUICtrlCreateLabel("Version " & $g_CurrentVersion, 7 * $l_GUIWidth / 8 - 20, $l_GUIHeight - 42, $l_GUIWidth / 8, 21, BitOR($SS_SUNKEN, $SS_CENTER))
			GUICtrlSetFont($h_L_Version, 12, $FW_BOLD)
			If (Number($g_CurrentVersion) < Number($g_NewestVersion)) Then
				GUICtrlSetColor($h_L_Version, 0xFF0000)
				GUICtrlSetCursor($h_L_Version, 0)
			ElseIf (Number($g_CurrentVersion) > Number($g_NewestVersion)) Then
				GUICtrlSetColor($h_L_Version, 0x0000FF)
			Else
				GUICtrlSetColor($h_L_Version, 0x33DD33)
			EndIf

	$h_T_MenuBar = _GUIToolTip_Create($h_GUI)
    _GUIToolTip_SetDelayTime($h_T_MenuBar, $TTDT_AUTOPOP, 32767)
    _GUIToolTip_SetMaxTipWidth($h_T_MenuBar, 1000)
	_GUIToolTip_SetTitle($h_T_MenuBar, "")
	_GUIToolTip_AddTool($h_T_MenuBar, 0, "Minimize", GUICtrlGetHandle($h_B_Minimize))
	_GUIToolTip_AddTool($h_T_MenuBar, 0, "Close", GUICtrlGetHandle($h_B_Close))

	$h_T_TooltipCtrl = _GUIToolTip_Create($h_GUI)
    _GUIToolTip_SetDelayTime($h_T_TooltipCtrl, $TTDT_AUTOPOP, 32767)
    _GUIToolTip_SetMaxTipWidth($h_T_TooltipCtrl, 1000)
	_GUIToolTip_SetTitle($h_T_TooltipCtrl, "Info", $TTI_INFO)

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select the target process by it's executable name (not unique).", GUICtrlGetHandle($h_L_ProcName))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select the target process by it's executable name (not unique).", GUICtrlGetHandle($h_R_ProcName))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select the target process by it's identifier (unique but changes when the process restarts).", GUICtrlGetHandle($h_L_PID))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select the target process by it's identifier (unique but changes when the process restarts).", GUICtrlGetHandle($h_R_PID))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select a process using the ProcessList™.", GUICtrlGetHandle($h_B_SelProcess))

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Delays the injection (in ms).", GUICtrlGetHandle($h_L_InjDelay))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "The injector automatically closes after injecting the checkmarked dll(s).", GUICtrlGetHandle($h_C_CloseAI))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "If the injector finds the target process, it automatically injects the checkmarked dll(s).", GUICtrlGetHandle($h_C_AutoI))

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "LoadLibraryExW is the default injection method which simply uses LoadLibraryExW." & @CRLF & _
		"LdrLoadDll is an advanced injection method which uses LdrLoadDll and bypasses LoadLibrary(Ex) hooks." & @CRLF & _
		"ManualMap is an advanced injection technique which bypasses most module detection methods.", GUICtrlGetHandle($h_C_Method))
	If (NOT $g_RunNative) Then
		_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Hijacks a handle from another process. To use this method please run the 64-bit version of the injector.", GUICtrlGetHandle($h_L_HijackHandle));dummy label
	Else
		_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Hijacks a handle from another process.", GUICtrlGetHandle($h_C_HijackHandle))
	EndIf
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "NtCreateThreadEx: Creates a simple remote thread to load the dll(s)." & @CRLF & _
		"Thread hijacking: Redirects a thread to a codecave to load the dll(s)." & @CRLF & _
		"SetWindowsHookEx: Adds a hook into the window callback list which then loads the dll(s)." & @CRLF & _
		"QueueUserAPC: Registers an asynchronous procedure call to the process' threads which then loads the dll(s).", GUICtrlGetHandle($h_C_LaunchMethod))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Attempts to hide the thread from debuggers, fakes the startaddress and disables thread attach/detach calls.", GUICtrlGetHandle($h_L_CloakThread));dummy label
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Attempts to hide the thread from debuggers, fakes the startaddress and disables thread attach/detach calls.", GUICtrlGetHandle($h_C_CloakThread))

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Keep PEH: Doesn't modify the PE header of the dll(s)." & @CRLF & _
		"Erase PEH: Erases the PE header by wrting 0's to it to avoid detections." & @CRLF & _
		"Fake PEH: Replaces the PE header with the PE header of a normal windows module (eg. kernel32.dll).", GUICtrlGetHandle($h_C_Header))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Renames the dll(s) randomly before injecting it/them.", GUICtrlGetHandle($h_C_RandomizeName))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Click to configure advanced cloaking options.", GUICtrlGetHandle($h_B_AdvSettings))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Creates a copy of the dll(s) in the user's temp directory which then get(s) loaded into the target process.", GUICtrlGetHandle($h_C_LoadCopy))

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select files from disk to add them to the list or drag & drop them into the listview above.", GUICtrlGetHandle($h_B_Add))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Inject checkmarked dll(s) into the selected process.", GUICtrlGetHandle($h_B_Inject))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Remove highlighted entries from the list.", GUICtrlGetHandle($h_B_Remove))

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "You won't have to see this again.", GUICtrlGetHandle($h_B_ToggleTips))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Open the release thread (guidedhacking.com/ghinjector) for support.", GUICtrlGetHandle($h_B_Help))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Open the changelog on pastebin.", GUICtrlGetHandle($h_B_Changelog))
	If (Number($g_CurrentVersion) < Number($g_NewestVersion)) Then
		_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Your version of the GH Injector is outdated. Click to update.", GUICtrlGetHandle($h_L_Version))
	ElseIf (Number($g_CurrentVersion) > Number($g_NewestVersion)) Then
		_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Shit mate, your version is from the future.", GUICtrlGetHandle($h_L_Version))
	Else
		_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "You're using the newest version of the GH Injector.", GUICtrlGetHandle($h_L_Version))
	EndIf

	If ($g_ToolTipsOn = False) Then
		_GUIToolTip_Deactivate($h_T_TooltipCtrl)
		GUICtrlSetData($h_B_ToggleTips, "Enable Tooltips")
	EndIf

	GUIRegisterMsg($WM_NOTIFY,	 	"WM_NOTIFY")
	GUIRegisterMsg($WM_DROPFILES, 	"WM_DROPFILES")
	GUIRegisterMsg($WM_COMMAND, 	"WM_COMMAND")
	GUIRegisterMsg($WM_MOVE,		"WM_MOVE")
	GUIRegisterMsg($WM_PAINT,		"WM_PAINT")
	GUIRegisterMsg($WM_CTLCOLORLISTBOX, "WM_CTLCOLORLISTBOX")

	$g_ShortStruct = DllStructCreate($g_tagShort)

	$G_HBRUSH_SuperDark = _WinAPI_CreateSolidBrush($C_GUI_Ctrl_Listview[1])
	$G_HBRUSH_Dark 		= _WinAPI_CreateSolidBrush(RGBToBGR($C_GUI[1]))
	$G_HBRUSH_SemiDark	= _WinAPI_CreateSolidBrush(RGBToBGR(0x666666))
	$G_HBRUSH_Light 	= _WinAPI_CreateSolidBrush(RGBToBGR(0x888888))

	$HDC_DLL_LVH		= _WinAPI_GetDC($g_h_DllListHeader)
	$HFONT_LVH 			= _SendMessage($g_h_DllListHeader, $WM_GETFONT)
	$HGDIOBJ_LVH_Font 	= _WinAPI_SelectObject($HDC_DLL_LVH, $HFONT_LVH)
	$LOGFONT_LVH_Font 	= DllStructCreate($tagLOGFONT)

	_WinAPI_GetObject	($HFONT_LVH, DllStructGetSize($LOGFONT_LVH_Font), DllStructGetPtr($LOGFONT_LVH_Font))
	_WinAPI_SelectObject($HDC_DLL_LVH, $HGDIOBJ_LVH_Font)
	_WinAPI_ReleaseDC	($g_h_DllListHeader, $HDC_DLL_LVH)

	$LOGFONT_LVH_Font.Weight = BitOR($LOGFONT_LVH_Font.Weight, $FW_BOLD)
	$G_HFONT_LV_Font = _WinAPI_CreateFontIndirect($LOGFONT_LVH_Font)
	$GUI_RECT_Buffer = DllStructCreate($tagRECT)

	$g_kernel32_dll = DllOpen("kernel32.dll")
	$h_User32_dll	= DllOpen("User32.dll")
	$h_Comctl32_DLL = DllOpen("Comctl32.dll")
    $h_GUI_LV_SubclassProc 		= DllCallbackRegister("GUI_LV_SubclassProc", 'LRESULT', 'HWND;UINT;WPARAM;LPARAM;UINT_PTR;DWORD_PTR')
	$ph_GUI_LV_SubclassProc 	= DllCallbackGetPtr($h_GUI_LV_SubclassProc)
	_WinAPI_SetWindowSubclass(GUICtrlGetHandle($g_hDllList), $ph_GUI_LV_SubclassProc, 1, 0)

	Local $Accel_CtrlA[1][2] = [[ "^a", $h_D_SelAll ]]
    GUISetAccelerators($Accel_CtrlA)

	$h_P_ProcIcon = _GUIImageList_Create(20, 20, 5, 1)
		$hBmp_light = _WinAPI_CreateSolidBitmap($h_GUI, $C_GUI_ProcIconList[0], 20, 20)
		$hBmp_dark 	= _WinAPI_CreateSolidBitmap($h_GUI, $C_GUI_ProcIconList[1], 20, 20)

		_GUIImageList_Add($h_P_ProcIcon, $hBmp_light)
		_GUIImageList_Add($h_P_ProcIcon, $hBmp_dark)
		_GUIImageList_AddIcon($h_P_ProcIcon, @SystemDir & "\shell32.dll", 131, True)
		_GUIImageList_AddIcon($h_P_ProcIcon, @SystemDir & "\imageres.dll", 11, True)
		_GUIImageList_AddIcon($h_P_ProcIcon, @SystemDir & "\cmd.exe", 0, True)
		_GUIImageList_AddIcon($h_P_ProcIcon, $l_LulIconPath, 0, True)

		_WinAPI_DeleteObject($hBmp_dark)
		_WinAPI_DeleteObject($hBmp_light)

	$h_G_AdvSettings = GUICreate("", 239, 55, 14, 220, BitOR($WS_POPUP, $WS_BORDER), Default, $h_GUI)

	$h_B_AdvSettingsB = CreateGroupBoxNoText(0, 0, 238, 54, $C_GUI_Border[0])

		$h_L_Unlink = GUICtrlCreateLabel("", 140, 321, 100, 20)
			GUICtrlSetState($h_L_Unlink, $GUI_DISABLE)
		$h_C_Unlink = GUICtrlCreateCheckbox("Unlink from PEB", 5, 5, 100, 20)
			If (BitAND($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)) Then
				GUICtrlSetState($h_C_Unlink, $GUI_CHECKED)
			EndIf
			If ($g_InjectionMethod = 2) Then
				GUICtrlSetState($h_C_Unlink, BitOr($GUI_CHECKED, $GUI_DISABLE))
				GUICtrlSetState($h_L_Shift, $GUI_ENABLE)
			EndIf
		$h_L_Shift = GUICtrlCreateLabel("", 140, 5, 80, 20)
			GUICtrlSetState($h_L_Shift, $GUI_DISABLE)
		$h_C_Shift = GUICtrlCreateCheckbox("Shift module", 140, 5, 80, 20)

		$h_L_Clean = GUICtrlCreateLabel("", 5, 30, 125, 20)
			GUICtrlSetState($h_L_Clean, $GUI_DISABLE)
		$h_C_Clean = GUICtrlCreateCheckbox("Clean data directories", 5, 30, 125, 20)

		If ($g_InjectionMethod <> 2) Then
			GUICtrlSetState($h_C_Shift, $GUI_DISABLE)
			GUICtrlSetState($h_C_Clean, $GUI_DISABLE)
			GUICtrlSetState($h_L_Shift, $GUI_ENABLE)
			GUICtrlSetState($h_L_Clean, $GUI_ENABLE)
		Else
			If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
				GUICtrlSetState($h_C_Shift, $GUI_CHECKED)
			EndIf
			If (BitAND($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)) Then
				GUICtrlSetState($h_C_Clean, $GUI_CHECKED)
			EndIf
		EndIf

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Shifts the image by a randomly generated amount of bytes (manual mapping only).", GUICtrlGetHandle($h_L_Shift));dummy label
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Shifts the image by a randomly generated amount of bytes (manual mapping only).", GUICtrlGetHandle($h_C_Shift))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Removes unnecessary data from the data directory of the image (manual mapping only).", GUICtrlGetHandle($h_L_Clean));dummy label
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Removes unnecessary data from the data directory of the image (manual mapping only).", GUICtrlGetHandle($h_C_Clean))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Removes the list entry of the dll(s) from the lists in the process enviroment block (not needed for manual mapping).", GUICtrlGetHandle($h_L_Unlink));dummy label
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Removes the list entry of the dll(s) from the lists in the process enviroment block (not needed for manual mapping).", GUICtrlGetHandle($h_C_Unlink))

	$h_PM_DllList_All[0] = _PopUpMenu_Create($h_GUI, 180, 23, True)
		$A_ID_ToggleAll 	= _PopUpMenu_AddOption($h_PM_DllList_All[0], "Toggle all", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 238)
		$A_ID_ActivateAll	= _PopUpMenu_AddOption($h_PM_DllList_All[0], "Activate all", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 296)
		$A_ID_DeactivateAll	= _PopUpMenu_AddOption($h_PM_DllList_All[0], "Deactivate all", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 131)
		$A_ID_SelectAll 	= _PopUpMenu_AddOption($h_PM_DllList_All[0], "Select all", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 165)
		$A_ID_DeleteAll		= _PopUpMenu_AddOption($h_PM_DllList_All[0], "Delete all", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 32)
		$A_ID_DeleteInvalid	= _PopUpMenu_AddOption($h_PM_DllList_All[0], "Delete invalid files", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 271)

	$h_PM_DllList_All[1] = _PopUpMenu_Create($h_GUI, 180, 23, True)
		_PopUpMenu_AddOption($h_PM_DllList_All[1], "Toggle all", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 238)
		_PopUpMenu_AddOption($h_PM_DllList_All[1], "Activate all", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 296)
		_PopUpMenu_AddOption($h_PM_DllList_All[1], "Deactivate all", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 131)
		_PopUpMenu_AddOption($h_PM_DllList_All[1], "Select all", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 165)
		_PopUpMenu_AddOption($h_PM_DllList_All[1], "Delete all", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 32)
		_PopUpMenu_AddOption($h_PM_DllList_All[1], "Delete invalid files", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 271)

	$h_PM_DllList_Sel[0] = _PopUpMenu_Create($h_GUI, 180, 23, True)
		$A_ID_Toggle 		= _PopUpMenu_AddOption($h_PM_DllList_Sel[0], "Toggle", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 238)
		$A_ID_Activate 		= _PopUpMenu_AddOption($h_PM_DllList_Sel[0], "Activate", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 296)
		$A_ID_Deactivate 	= _PopUpMenu_AddOption($h_PM_DllList_Sel[0], "Deactivate", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 131)
		$A_ID_Select		= _PopUpMenu_AddOption($h_PM_DllList_Sel[0], "Select all", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 165)
		$A_ID_Delete 		= _PopUpMenu_AddOption($h_PM_DllList_Sel[0], "Delete", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 32)
		$A_ID_Open			= _PopUpMenu_AddOption($h_PM_DllList_Sel[0], "Open location", True, $C_GUI_Ctrl_PopUpMenuBgDef[0], $C_GUI_Ctrl_PopUpMenuBgHov[0], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[0], $C_GUI_Ctrl_PopUpMenuTxHov[0], Default, @SystemDir & '\shell32.dll', 45)

	$h_PM_DllList_Sel[1] = _PopUpMenu_Create($h_GUI, 180, 23, True)
		_PopUpMenu_AddOption($h_PM_DllList_Sel[1], "Toggle", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 238)
		_PopUpMenu_AddOption($h_PM_DllList_Sel[1], "Activate", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 296)
		_PopUpMenu_AddOption($h_PM_DllList_Sel[1], "Deactivate", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 131)
		_PopUpMenu_AddOption($h_PM_DllList_Sel[1], "Select all", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 165)
		_PopUpMenu_AddOption($h_PM_DllList_Sel[1], "Delete", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 32)
		_PopUpMenu_AddOption($h_PM_DllList_Sel[1], "Open location", True, $C_GUI_Ctrl_PopUpMenuBgDef[1], $C_GUI_Ctrl_PopUpMenuBgHov[1], _
			Default, $C_GUI_Ctrl_PopUpMenuTxDef[1], $C_GUI_Ctrl_PopUpMenuTxHov[1], Default, @SystemDir & '\shell32.dll', 45)

	UpdateTheme($g_DarkThemeEnabled)

	GUISetState(@SW_SHOW, $h_GUI)

	UpdateTargetProcess()

	Return $h_GUI

EndFunc   ;==>CreateGUI

Func UpdateTheme($bEnableDarkTheme = False)

	$g_DarkThemeEnabled = $bEnableDarkTheme

	GUISetState(@SW_LOCK, $h_GUI)

	If ($g_DarkThemeEnabled) Then
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_CloseAI), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_AutoI), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_HijackHandle), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_CloakThread), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_Unlink), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_LoadCopy), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_ProcName), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_Method), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_LaunchMethod), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_Header), "wstr", "", "wstr", "")

		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_RandomizeName), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_Shift), "wstr", "", "wstr", "")
		DllCall("UxTheme.dll", "int", "SetWindowTheme", "HWND", GUICtrlGetHandle($h_C_Clean), "wstr", "", "wstr", "")

		GUICtrlSetColor($h_B_SwitchTheme, $C_GUI_Text[0])
		GUICtrlSetBkColor($h_B_SwitchTheme, $C_GUI_Ctrl_Button[0])
		GUICtrlSetData($h_B_SwitchTheme, "Light mode")
	Else
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_CloseAI), "DarkMode_Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_AutoI), "DarkMode_Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_HijackHandle), "DarkMode_Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_CloakThread), "DarkMode_Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_Unlink), "Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_LoadCopy), "Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_ProcName), "Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_Method), "Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_LaunchMethod), "Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_Header), "Explorer")

		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_RandomizeName), "Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_Shift), "Explorer")
		_WinAPI_SetWindowTheme(GUICtrlGetHandle($h_C_Clean), "Explorer")

		GUICtrlSetColor($h_B_SwitchTheme, $C_GUI_Text[1])
		GUICtrlSetBkColor($h_B_SwitchTheme, $C_GUI_Ctrl_Button[1])
		GUICtrlSetData($h_B_SwitchTheme, "Dark mode")
	EndIf

	GUISetBkColor($C_GUI[$g_DarkThemeEnabled], $h_GUI)

	GUICtrlSetBkColor	($h_L_ProcName, $C_GUI_Ctrl_Label[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_L_ProcName, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_L_PID, $C_GUI_Ctrl_Label[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_L_PID, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_L_InjDelay, $C_GUI_Ctrl_Label[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_L_InjDelay, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_L_Version, $C_GUI_Version_Label[$g_DarkThemeEnabled])


	GUICtrlSetBkColor	($h_B_Settings[5], $C_GUI_Ctrl_Label[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_Settings[5], $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_InjectionMethod[5], $C_GUI_Ctrl_Label[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_InjectionMethod[5], $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_Cloaking[5], $C_GUI_Ctrl_Label[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_Cloaking[5], $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_Files[5], $C_GUI_Ctrl_Label[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_Files[5], $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_Info[5], $C_GUI_Ctrl_Label[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_Info[5], $C_GUI_Text[$g_DarkThemeEnabled])

	For $i = 0 To 4 Step 1
		GUICtrlSetBkColor	($h_B_Settings[$i], $C_GUI_Border[$g_DarkThemeEnabled])
		GUICtrlSetColor		($h_B_Settings[$i], $C_GUI_Border[$g_DarkThemeEnabled])

		GUICtrlSetBkColor	($h_B_InjectionMethod[$i], $C_GUI_Border[$g_DarkThemeEnabled])
		GUICtrlSetColor		($h_B_InjectionMethod[$i], $C_GUI_Border[$g_DarkThemeEnabled])

		GUICtrlSetBkColor	($h_B_Cloaking[$i], $C_GUI_Border[$g_DarkThemeEnabled])
		GUICtrlSetColor		($h_B_Cloaking[$i], $C_GUI_Border[$g_DarkThemeEnabled])

		GUICtrlSetBkColor	($h_B_Files[$i], $C_GUI_Border[$g_DarkThemeEnabled])
		GUICtrlSetColor		($h_B_Files[$i], $C_GUI_Border[$g_DarkThemeEnabled])

		GUICtrlSetBkColor	($h_B_Info[$i], $C_GUI_Border[$g_DarkThemeEnabled])
		GUICtrlSetColor		($h_B_Info[$i], $C_GUI_Border[$g_DarkThemeEnabled])
	Next


	GUICtrlSetBkColor	($h_C_CloseAI, $C_GUI_Ctrl_Checkbox[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_CloseAI, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_C_AutoI, $C_GUI_Ctrl_Checkbox[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_AutoI, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_C_HijackHandle, $C_GUI_Ctrl_Checkbox[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_HijackHandle, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_C_CloakThread, $C_GUI_Ctrl_Checkbox[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_CloakThread, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_C_Unlink, $C_GUI_Ctrl_Checkbox[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_Unlink, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_C_LoadCopy, $C_GUI_Ctrl_Checkbox[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_LoadCopy, $C_GUI_Text[$g_DarkThemeEnabled])


	GUICtrlSetBkColor	($h_C_ProcName, $C_GUI_Ctrl_Combo[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_ProcName, $C_GUI_Text[$g_DarkThemeEnabled])
	_GUICtrlComboBox_SetEditSel($h_C_ProcName, 0, 0)

	GUICtrlSetBkColor	($h_C_Method, $C_GUI_Ctrl_Combo[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_Method, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_C_LaunchMethod, $C_GUI_Ctrl_Combo[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_LaunchMethod, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_C_Header, $C_GUI[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_Header, $C_GUI_Text[$g_DarkThemeEnabled])


	GUICtrlSetBkColor	($h_B_SelProcess, $C_GUI_Ctrl_Button[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_SelProcess, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_AdvSettings, $C_GUI_Ctrl_Button[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_AdvSettings, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_Reset, $C_GUI_Ctrl_Button[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_Reset, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_Add, $C_GUI_Ctrl_Button[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_Add, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_Inject, $C_GUI_Ctrl_Button[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_Inject, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_Remove, $C_GUI_Ctrl_Button[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_Remove, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_ToggleTips, $C_GUI_Ctrl_Button[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_ToggleTips, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_Help, $C_GUI_Ctrl_Button[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_Help, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_B_Changelog, $C_GUI_Ctrl_Button[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_B_Changelog, $C_GUI_Text[$g_DarkThemeEnabled])


	GUICtrlSetBkColor	($h_R_ProcName, $C_GUI_Ctrl_Radio[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_R_ProcName, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_R_PID, $C_GUI_Ctrl_Radio[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_R_PID, $C_GUI_Text[$g_DarkThemeEnabled])


	GUICtrlSetBkColor	($h_I_InjDelay, $C_GUI_Ctrl_Input[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_I_InjDelay, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_I_PID, $C_GUI_Ctrl_Input[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_I_PID, $C_GUI_Text[$g_DarkThemeEnabled])


	_GUICtrlListView_BeginUpdate($g_hDllList)
	GUICtrlSetBkColor	($g_hDllList, $C_GUI_Ctrl_Listview[$g_DarkThemeEnabled])
	GUICtrlSetColor		($g_hDllList, $C_GUI_Text[$g_DarkThemeEnabled])
	_GUICtrlListView_EndUpdate($g_hDllList)
	_GUICtrlListView_RedrawItems($g_hDllList, 0, _GUICtrlListView_GetItemCount($g_hDllList) - 1)


	GUISetBkColor($C_GUI[$g_DarkThemeEnabled], $h_G_AdvSettings)

	GUICtrlSetBkColor	($h_C_RandomizeName, $C_GUI_Ctrl_Checkbox[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_RandomizeName, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_C_Shift, $C_GUI_Ctrl_Checkbox[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_Shift, $C_GUI_Text[$g_DarkThemeEnabled])

	GUICtrlSetBkColor	($h_C_Clean, $C_GUI_Ctrl_Checkbox[$g_DarkThemeEnabled])
	GUICtrlSetColor		($h_C_Clean, $C_GUI_Text[$g_DarkThemeEnabled])


	GUISetState(@SW_UNLOCK, $h_GUI)

	UpdateProcessIcon($g_PID)

EndFunc   ;==>UpdateTheme

Func GetStringDimensions($hWnd, $Text)

	If (NOT IsHWnd($hWnd)) Then $hWnd = GUICtrlGetHandle($hWnd)

    Local $hDC 		= _WinAPI_GetDC($hWnd)
    Local $hFont 	= _SendMessage($hWnd, $WM_GETFONT)

    Local $hSelectObject 	= _WinAPI_SelectObject($hDC, $hFont)
    Local $tSIZE 			= _WinAPI_GetTextExtentPoint32($hDC, $Text)

    _WinAPI_SelectObject($hDC, $hSelectObject)
    _WinAPI_ReleaseDC($hWnd, $hDC)

    Return $tSIZE

EndFunc   ;==>GetStringDimensions

Func CreateGroupBoxNoText($x, $y, $w, $h, $BorderColour)

	Local $Ret[4] = [0, 0, 0, 0]

	$Ret[0] 	= GUICtrlCreateLabel("", $x, $y, $w, 1)
	GUICtrlSetBkColor(-1, $BorderColour)

	$Ret[1] 	= GUICtrlCreateLabel("", $x, $y, 1, $h)
	GUICtrlSetBkColor(-1, $BorderColour)

	$Ret[2] 	= GUICtrlCreateLabel("", $x + $w, $y, 1, $h)
	GUICtrlSetBkColor(-1, $BorderColour)

	$Ret[3]		= GUICtrlCreateLabel("", $x, $y + $h, $w + 1, 1)
	GUICtrlSetBkColor(-1, $BorderColour)

	Return $Ret

EndFunc   ;==>CreateGroupBoxNoText

Func CreateGroupBox($hOwner, $Title, $x, $y, $w, $h, $BorderColour = 0xFF000000, $TextStyle = $SS_CENTER, $TextColour = 0xFF000000, $TextOffset = 5)

	$hDummyLabel = GUICtrlCreateLabel($Title, 600, 600)
	$TextRect = GetStringDimensions(GUICtrlGetHandle($hDummyLabel), $Title)
	GUICtrlDelete($hDummyLabel)

	If (BitAND($TextStyle, $SS_CENTER) <> 0) Then
		$TextOffset = ($w - $TextRect.X) / 2
	ElseIf (BitAND($TextStyle, $SS_RIGHT) <> 0) Then
		$TextOffset = $w - $TextRect.X - $TextOffset
	EndIf

	Local $Ret[6]

	$Ret[0]	= GUICtrlCreateLabel("", $x, $y, $TextOffset, 1)
	GUICtrlSetBkColor(-1, $BorderColour)

	$Ret[1]	= GUICtrlCreateLabel("", $x + $TextOffset + $TextRect.X, $y, $w - $TextOffset - $TextRect.X, 1)
	GUICtrlSetBkColor(-1, $BorderColour)

	$Ret[2]	= GUICtrlCreateLabel("", $x, $y, 1, $h)
	GUICtrlSetBkColor(-1, $BorderColour)

	$Ret[3]	= GUICtrlCreateLabel("", $x + $w - 1, $y, 1, $h)
	GUICtrlSetBkColor(-1, $BorderColour)

	$Ret[4]	= GUICtrlCreateLabel("", $x, $y + $h - 1, $w, 1)
	GUICtrlSetBkColor(-1, $BorderColour)

	$Ret[5]	= GUICtrlCreateLabel($Title, $x + $TextOffset, $y - $TextRect.Y / 2, $TextRect.X, $TextRect.Y)
	GUICtrlSetColor(-1, $TextColour)

	Return $Ret

EndFunc   ;==>CreateGroupBox

Func CreateBitmapFromIcon($BackgroundColour, $FilePath, $IconIndex, $Size)

    $hDC = _WinAPI_GetDC(0)
    $hBackDC = _WinAPI_CreateCompatibleDC($hDC)
    $hBitmap = _WinAPI_CreateSolidBitmap(0, $BackgroundColour, $Size, $Size)
    $hBackSv = _WinAPI_SelectObject($hBackDC, $hBitmap)
    $hIcon = _WinAPI_ExtractIcon($FilePath, $IconIndex, True)

    If (NOT @error) Then
        _WinAPI_DrawIconEx($hBackDC, 0, 0, $hIcon, 0, 0, 0, 0, $DI_NORMAL)
        _WinAPI_DestroyIcon($hIcon)
	EndIf

    _WinAPI_SelectObject($hBackDC, $hBackSv)
    _WinAPI_ReleaseDC(0, $hDC)
    _WinAPI_DeleteDC($hBackDC)

    Return $hBitmap

EndFunc   ;==>CreateBitmapFromIcon

Func DllList_PopUp($hwnd)

	Local $ItemHit = _GUICtrlListView_HitTest($hwnd)

	If (UBound($ItemHit) AND $ItemHit[0] <> -1) Then
		$popup_action_id = _PopUpMenu_Track($h_PM_DllList_Sel[$g_DarkThemeEnabled])
		If ($popup_action_id[0]) Then
			UpdateLV($g_hDllList, $popup_action_id[1], $M_Selected)
		EndIf
	Else
		$popup_action_id = _PopUpMenu_Track($h_PM_DllList_All[$g_DarkThemeEnabled])
		If ($popup_action_id[0]) Then
			UpdateLV($g_hDllList, $popup_action_id[1], $M_All)
		EndIf
	EndIf

EndFunc   ;==>DllList_PopUp

Func UpdateLV($hListView, $ActionID, $Mode = $M_All)

	$Count 		= _GUICtrlListView_GetItemCount($hListView)
	$SelIndices = _GUICtrlListView_GetSelectedIndices($hListView, True)

	If ($Mode = $M_Selected AND (NOT IsArray($SelIndices) OR $SelIndices[0] = 0)) Then
		Return
	EndIf

	_GUICtrlListView_BeginUpdate($hListView)

	Switch $Mode
		Case $M_Selected
			Switch $ActionID
				Case $A_ID_Toggle
					For $i = 1 To $SelIndices[0] Step 1
						$checked = _GUICtrlListView_GetItemChecked($hListView, $SelIndices[$i])
						If ($checked = True) Then
							_GUICtrlListView_SetItemChecked($hListView, $SelIndices[$i], False)
						Else
							_GUICtrlListView_SetItemChecked($hListView, $SelIndices[$i], True)
						EndIf
					Next

				Case $A_ID_Activate
					For $i = 1 To $SelIndices[0] Step 1
						_GUICtrlListView_SetItemChecked($hListView, $SelIndices[$i], True)
					Next

				Case $A_ID_Deactivate
					For $i = 1 To $SelIndices[0] Step 1
						_GUICtrlListView_SetItemChecked($hListView, $SelIndices[$i], False)
					Next

				Case $A_ID_Select
					_GUICtrlListView_SetItemSelected($hListView, -1)

				Case $A_ID_Delete
					For $i = $SelIndices[0] To 1 Step -1
						_GUICtrlListView_DeleteItem($hListView, $SelIndices[$i])
					Next

				Case $A_ID_Open
					$filepath = _GUICtrlListView_GetItemText($hListView, $SelIndices[1], 2)
					If (IsString($filepath)) Then
						$pos 		= StringInStr($filepath, "\", $STR_NOCASESENSE, -1)
						$filepath 	= StringTrimRight($filepath, StringLen($filepath) - $pos + 1)
						ShellExecute($filepath)
					EndIf

			EndSwitch
		Case $M_All
			Switch $ActionID
				Case $A_ID_ToggleAll
					For $i = 0 To $Count - 1 Step 1
						$checked = _GUICtrlListView_GetItemChecked($hListView, $i)
						If ($checked = True) Then
							_GUICtrlListView_SetItemChecked($hListView, $i, False)
						Else
							_GUICtrlListView_SetItemChecked($hListView, $i, True)
						EndIf
					Next

				Case $A_ID_ActivateAll
					_GUICtrlListView_SetItemChecked($hListView, -1, True)

				Case $A_ID_DeactivateAll
					_GUICtrlListView_SetItemChecked($hListView, -1, False)

				Case $A_ID_SelectAll
					_GUICtrlListView_SetItemSelected($hListView, -1)

				Case $A_ID_DeleteAll
					_GUICtrlListView_DeleteAllItems($hListView)

				Case $A_ID_DeleteInvalid
					Local $filepath_list[$Count]

					For $i = $Count - 1 To 0 Step -1
						$filepath = _GUICtrlListView_GetItemText($hListView, $i, 2)
						If (NOT FileExists($filepath)) Then
							_GUICtrlListView_DeleteItem($hListView, $i)
						EndIf
					Next

			EndSwitch
	EndSwitch

	_GUICtrlListView_EndUpdate($hListView)

EndFunc   ;==>UpdateLV

Func GUI_LV_SubclassProc($hWnd, $uMsg, $wParam, $lParam, $iID, $pData)

	If ($uMsg = $WM_GETDLGCODE) Then
		If ($wParam = $VK_DELETE) Then
			$tMsg = DllStructCreate($_tagMSG, $lParam)
			If ($tMsg.message = $WM_KEYDOWN) Then
				UpdateLV($g_hDllList, $A_ID_Delete, $M_Selected)
			EndIf
		ElseIf ($wParam = $VK_SPACE) Then
			$tMsg = DllStructCreate($_tagMSG, $lParam)
			If ($tMsg.message = $WM_KEYDOWN AND NOT BitAND($tMsg.lParam, 0x40000000)) Then
				UpdateLV($g_hDllList, $A_ID_Activate, $M_Selected)
			EndIf
		EndIf
	ElseIf ($g_DarkThemeEnabled AND $uMsg = $WM_NOTIFY) Then
		$tNMHDR = DllStructCreate($tagNMHDR, $lParam)
		If ($tNMHDR.Code = $NM_CUSTOMDRAW AND $tNMHDR.hWndFrom = $g_h_DllListHeader) Then
			Local $NMLVCD = DllStructCreate($tagNMLVCUSTOMDRAW, $lParam)

			Switch $NMLVCD.dwDrawStage
				Case $CDDS_PREPAINT
					Return $CDRF_NOTIFYITEMDRAW

				Case $CDDS_ITEMPREPAINT
					Return $CDRF_NOTIFYPOSTPAINT

				Case $CDDS_ITEMPOSTPAINT

					Local $hDC 		= $NMLVCD.hdc
					Local $index 	= $NMLVCD.dwItemSpec

					If ($index < 0 OR $index > UBound($g_DllList_ColumnWidth) - 1 OR ($g_DllList_ColumnWidth[$index] = 0)) Then
						Return $CDRF_DODEFAULT
					EndIf

					_WinAPI_SelectObject($hDC, $G_HFONT_LV_Font)
					_WinAPI_SetBkMode($hDC, $TRANSPARENT)
					_WinAPI_SetTextColor($hDC, $C_GUI_Text[1])

					$curr_total_col_width = 0
					For $i = 0 To $index - 1 Step 1
						$curr_total_col_width += $g_DllList_ColumnWidth[$i]
					Next

					$GUI_RECT_Buffer.Left 	= $NMLVCD.Left
					$GUI_RECT_Buffer.Top 	= $NMLVCD.Top
					$GUI_RECT_Buffer.Right 	= $NMLVCD.Right
					$GUI_RECT_Buffer.Bottom = $NMLVCD.Bottom

					If ($NMLVCD.uItemState = $CDIS_SELECTED) Then
						_WinAPI_FillRect($hDC, $GUI_RECT_Buffer, $G_HBRUSH_Light)
						If (BitAND($g_DllList_HoverHeader, 2 ^ $index)) Then
							$g_DllList_HoverHeader = 0
						EndIf
					Else
						Local $info = MouseGetPos()
						$info[0] -= $g_LV_XY[0] + $g_MainGUI_X
						$info[1] -= $g_LV_XY[1] + $g_MainGUI_Y

						If ($info[0] >= $GUI_RECT_Buffer.Left AND $info[0] <= $GUI_RECT_Buffer.Right AND $info[1] >= $GUI_RECT_Buffer.Top AND $info[1] <= $GUI_RECT_Buffer.Bottom) Then
							_WinAPI_FillRect($hDC, $GUI_RECT_Buffer, $G_HBRUSH_SemiDark)
							$g_DllList_HoverHeader = BitOR($g_DllList_HoverHeader, 2 ^ $index)
						Else
							_WinAPI_FillRect($hDC, $GUI_RECT_Buffer, $G_HBRUSH_Dark)
							If (BitAND($g_DllList_HoverHeader, 2 ^ $index)) Then
								$g_DllList_HoverHeader = 0
							EndIf
						EndIf
					EndIf

					If ($index > 0 AND $index < UBound($g_DllList_ColumnWidth) - 1) Then
						$GUI_RECT_Buffer.Right 	= $GUI_RECT_Buffer.Left + 2
						$GUI_RECT_Buffer.Top 	+= 2
						$GUI_RECT_Buffer.Bottom	-= 2
						_WinAPI_FillRect($hDC, $GUI_RECT_Buffer, $G_HBRUSH_SuperDark)
					EndIf

					If ($index > 0) Then
						$GUI_RECT_Buffer.Left	= $curr_total_col_width
						$GUI_RECT_Buffer.Right 	= $g_DllList_ColumnWidth[$index] + $curr_total_col_width
						$GUI_RECT_Buffer.Top 	= $NMLVCD.Top + 4
						$GUI_RECT_Buffer.Bottom = $NMLVCD.Bottom

						_WinAPI_DrawText($hDC, "  " & $g_LV_HeaderTextSplit[$index], $GUI_RECT_Buffer, $DT_VCENTER)
					EndIf

					Return $CDRF_NEWFONT
				EndSwitch
		EndIf
	EndIf

	Return DllCall($h_Comctl32_DLL, "LRESULT", "DefSubclassProc", "HWND", $hWnd, "UINT", $uMsg, "WPARAM", $wParam, "LPARAM", $lParam)[0]

EndFunc   ;==>LV_SubClassProc

Func GUI_WM_NOTIFY($hWnd, $uMsg, $wParam, $lParam)

	$tNMHDR = DllStructCreate($tagNMHDR, $lParam)

	$hListView = GUICtrlGetHandle($g_hDllList)
	If (HWnd($tNMHDR.hwndFrom) = $hListView) Then
		If ($tNMHDR.code = $NM_RCLICK) Then
			DllList_PopUp($hListView)

		ElseIf ($tNMHDR.code = $NM_CUSTOMDRAW) Then
		    If (_GUICtrlListView_GetColumnWidth($g_hDllList, 0) <> $g_DllList_ColumnWidth[0]) Then
				_GUICtrlListView_SetColumnWidth($g_hDllList, 0, $g_DllList_ColumnWidth[0])
		    EndIf

			If (_GUICtrlListView_GetColumnWidth($g_hDllList, 4) <> $g_DllList_ColumnWidth[4]) Then
				_GUICtrlListView_SetColumnWidth($g_hDllList, 4, $g_DllList_ColumnWidth[4])
			EndIf

			$col_width_sum = 0
			For $i = 0 To 4 Step 1
				$g_DllList_ColumnWidth[$i] = _GUICtrlListView_GetColumnWidth($g_hDllList, $i)
				$col_width_sum += $g_DllList_ColumnWidth[$i]
			Next

			If ($col_width_sum < $l_DllListWidth) Then
				_GUICtrlListView_SetColumnWidth($g_hDllList, 3, $g_DllList_ColumnWidth[3] + $l_DllListWidth - $col_width_sum)
			EndIf

		ElseIf ($tNMHDR.code = $NM_DBLCLK) Then
			$tInfo = DllStructCreate($tagNMITEMACTIVATE, $lParam)
			If ($tInfo.SubItem > 0) Then
				$l_DoubleClickedDll = $tInfo.Index
			EndIf
		EndIf
	EndIf

    Return $GUI_RUNDEFMSG

EndFunc   ;==>GUI_WM_NOTIFY

Func WM_CTLCOLORLISTBOX($hWnd, $uMsg, $wParam, $lParam)

	If $g_DarkThemeEnabled Then
		_WinAPI_SetTextColor($wParam, $C_GUI_Text[1])
		Return $G_HBRUSH_Dark
	EndIf

    Return $GUI_RUNDEFMSG

EndFunc   ;==>WM_CTLCOLORLISTBOX

Func WM_NOTIFY($hWnd, $uMsg, $wParam, $lParam)

	If (NOT $l_ProcessListActive) Then
		Return GUI_WM_NOTIFY($hWnd, $uMsg, $wParam, $lParam)
	Else
		Return PL_WM_NOTIFY($hWnd, $uMsg, $wParam, $lParam)
	EndIf

EndFunc   ;==>WM_NOTFIY

Func WM_DROPFILES($hWnd, $uMsg, $wParam, $lParam)

    Local $Ret = _WinAPI_DragQueryFileEx($wParam, 1)
	If (UBound($Ret)) Then
		$DropFileBuffer = $Ret
	Else
		$DropFileBuffer[0] = 0
	EndIf

    Return $GUI_RUNDEFMSG

EndFunc   ;==>WM_DROPFILES

Func WM_COMMAND($hWnd, $uMsg, $wParam, $lParam)

	If ($l_IgnoreInputChange = True) Then
		Return $GUI_RUNDEFMSG
	EndIf

    Local $NotifyCode = _WinAPI_HiWord($wParam)

    If ($NotifyCode = $CBN_EDITUPDATE) Then

		If (_WinAPI_LoWord($wParam) = $h_C_ProcName) Then
			$g_Processname = GUICtrlRead($h_C_ProcName)

			$hWnd_Combo = GUICtrlGetHandle($h_C_ProcName)

			If (BitAND(DllCall($h_User32_dll, "SHORT", "GetAsyncKeyState", "int", $VK_BACK)[0], 0x8000) OR _
				BitAND(DllCall($h_User32_dll, "SHORT", "GetAsyncKeyState", "int", $VK_DELETE)[0], 0x8000)) Then
				Return $GUI_RUNDEFMSG
			EndIf

			$sEditText = _GUICtrlComboBox_GetEditText($hWnd_Combo)
			If (StringLen($sEditText) <> 0) Then
				Local $iRet = _GUICtrlComboBox_FindString($hWnd_Combo, $sEditText)
				If ($iRet <> $CB_ERR) Then
					Local $sInputText = 0
					_GUICtrlComboBox_GetLBText($hWnd_Combo, $iRet, $sInputText)
					_GUICtrlComboBox_SetEditText($hWnd_Combo, $sInputText)
					_GUICtrlComboBox_SetEditSel($hWnd_Combo, StringLen($sEditText), StringLen($sInputText))
				EndIf
				$l_AutoComplete = True
			Else
				$l_AutoComplete = False
			EndIf

			$l_UpdateProcess = True
		EndIf

	ElseIf ($NotifyCode = $CBN_CLOSEUP) Then

		If (_WinAPI_LoWord($wParam) = $h_C_ProcName) Then
			$g_Processname = GUICtrlRead($h_C_ProcName)
			$l_UpdateProcess = True
		EndIf

	ElseIf ($NotifyCode = $EN_CHANGE) Then

		Local $NotifierID = _WinAPI_LoWord($wParam)

		If ($NotifierID = $h_I_PID) Then
			$g_PID = GUICtrlRead($h_I_PID)
			$l_UpdateProcess = True
		ElseIf ($NotifierID = $h_I_InjDelay) Then
			$g_InjectionDelay = GUICtrlRead($h_I_InjDelay)
		EndIf

	EndIf

    Return $GUI_RUNDEFMSG

EndFunc   ;==>WM_COMMAND

Func WM_MOVE($hWnd, $uMsg, $wParam, $lParam)

	If ($hWnd = $h_GUI) Then
		$g_MainGUI_X = MakeShort(BitAND($lParam, 0xFFFF), $g_ShortStruct)
		$g_MainGUI_Y = MakeShort(BitAND(BitShift($lParam, 0x10), 0xFFFF), $g_ShortStruct)
	ElseIf ($l_ProcessListActive) Then
		$PL_ProcessList_X = MakeShort(BitAND($lParam, 0xFFFF), $g_ShortStruct)
		$PL_ProcessList_Y = MakeShort(BitAND(BitShift($lParam, 0x10), 0xFFFF), $g_ShortStruct)
	EndIf

	Return $GUI_RUNDEFMSG

EndFunc   ;==>WM_MOVE

Func WM_PAINT($hWnd, $uMsg, $wParam, $lParam)

	If ($hWnd = $h_GUI) Then
		UpdateProcessIcon($g_PID)
	EndIf

	Return $GUI_RUNDEFMSG

EndFunc   ;==>WM_PAINT

Func ResetGUI()

	GUICtrlSetState($h_R_ProcName, $GUI_CHECKED)
	GUICtrlSetState($h_C_ProcName, $GUI_ENABLE)
	GUICtrlSetState($h_I_PID, $GUI_DISABLE)

	_GUICtrlComboBox_ResetContent($h_C_ProcName)
	GUICtrlSetData($h_C_ProcName, $g_ProcessnameList, $g_Processname)
	GUICtrlSetData($h_I_PID, $g_PID)

	GUICtrlSetData($h_I_InjDelay, $g_InjectionDelay)

	If ($g_CloseAfterInjection) Then
		GUICtrlSetState($h_C_CloseAI, $GUI_CHECKED)
	Else
		GUICtrlSetState($h_C_CloseAI, $GUI_UNCHECKED)
	EndIf

	If ($g_AutoInjection) Then
		GUICtrlSetState($h_C_AutoI, $GUI_CHECKED)
	Else
		GUICtrlSetState($h_C_AutoI, $GUI_UNCHECKED)
	EndIf

	_GUICtrlComboBox_SetCurSel($h_C_Method, $g_InjectionMethod)

	If (BitAND($g_InjectionFlags, $INJ_HIJACK_HANDLE) AND $g_RunNative) Then
		GUICtrlSetState($h_C_HijackHandle, BitOR($GUI_CHECKED, $GUI_ENABLE))
	ElseIf (NOT $g_RunNative) Then
		GUICtrlSetState($h_C_HijackHandle, BitOR($GUI_UNCHECKED, $GUI_DISABLE))
		GUICtrlSetData($h_L_HijackHandle, $GUI_ENABLE)
	Else
		GUICtrlSetData($h_L_HijackHandle, $GUI_DISABLE)
		GUICtrlSetState($h_C_HijackHandle, BitOR($GUI_UNCHECKED, $GUI_ENABLE))
	EndIf

	_GUICtrlComboBox_SetCurSel($h_C_LaunchMethod, $g_LaunchMethod)

	If ($g_LaunchMethod = 0) Then
		GUICtrlSetState($h_L_CloakThread, $GUI_DISABLE)
		$state = 0
		If (BitAND($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)) Then
			$state = BitOR($GUI_CHECKED, $GUI_ENABLE)
		Else
			$state = BitOR($GUI_UNCHECKED, $GUI_ENABLE)
		EndIf
		GUICtrlSetState($h_C_CloakThread, $state)
	Else
		GUICtrlSetState($h_C_CloakThread, BitOR($GUI_UNCHECKED, $GUI_DISABLE))
		GUICtrlSetState($h_L_CloakThread, $GUI_ENABLE)
	EndIf

	_GUICtrlComboBox_SetCurSel($h_C_Header, 0)
	If (BitAND($g_InjectionFlags, $INJ_ERASE_HEADER)) Then
		_GUICtrlComboBox_SetCurSel($h_C_Header, 1)
	ElseIf (BitAND($g_InjectionFlags, $INJ_ERASE_HEADER)) Then
		_GUICtrlComboBox_SetCurSel($h_C_Header, 2)
	EndIf

	If($g_InjectionMethod = 2) Then
		GUICtrlSetState($h_C_Unlink, BitOR($GUI_CHECKED, $GUI_DISABLE))
		GUICtrlSetState($h_L_Unlink, $GUI_ENABLE)
	ElseIf (BitAND($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)) Then
		GUICtrlSetState($h_L_Unlink, $GUI_DISABLE)
		GUICtrlSetState($h_C_Unlink, BitOR($GUI_CHECKED, $GUI_ENABLE))
	Else
		GUICtrlSetState($h_L_Unlink, $GUI_DISABLE)
		GUICtrlSetState($h_C_Unlink, BitOR($GUI_UNCHECKED, $GUI_ENABLE))
	EndIf

	If ($g_InjectionMethod <> 2) Then
		GUICtrlSetState($h_C_Shift, BitOR($GUI_UNCHECKED, $GUI_DISABLE))
		GUICtrlSetState($h_C_Clean, BitOR($GUI_UNCHECKED, $GUI_DISABLE))

		GUICtrlSetState($h_L_Shift, $GUI_ENABLE)
		GUICtrlSetState($h_L_Clean, $GUI_ENABLE)
	Else
		GUICtrlSetState($h_L_Shift, $GUI_DISABLE)
		$state = 0
		If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
			$state = BitOR($GUI_CHECKED, $GUI_ENABLE)
		Else
			$state = BitOR($GUI_CHECKED, $GUI_DISABLE)
		EndIf
		GUICtrlSetState($h_C_Shift, $state)

		GUICtrlSetState($h_L_Clean, $GUI_DISABLE)
		$state = 0
		If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
			$state = BitOR($GUI_CHECKED, $GUI_ENABLE)
		Else
			$state = BitOR($GUI_CHECKED, $GUI_DISABLE)
		EndIf
		GUICtrlSetState($h_C_Clean, $state)
	EndIf

	If (BitAND($g_InjectionFlags, $INJ_SCRAMBLE_DLL_NAME)) Then
		GUICtrlSetState($h_C_RandomizeName, $GUI_CHECKED)
	Else
		GUICtrlSetState($h_C_RandomizeName, $GUI_UNCHECKED)
	EndIf

	If (BitAND($g_InjectionFlags, $INJ_LOAD_DLL_COPY)) Then
		GUICtrlSetState($h_C_LoadCopy, $GUI_CHECKED)
	Else
		GUICtrlSetState($h_C_LoadCopy, $GUI_UNCHECKED)
	EndIf

	If ($g_ToolTipsOn = False) Then
		_GUIToolTip_Deactivate($h_T_TooltipCtrl)
		GUICtrlSetData($h_B_ToggleTips, "Enable Tooltips")
	Else
		_GUIToolTip_Activate($h_T_TooltipCtrl)
		GUICtrlSetData($h_B_ToggleTips, "Disable Tooltips")
	EndIf

	UpdateTheme($g_DarkThemeEnabled)

EndFunc   ;==>ResetGUI

Func CloseGUI()

	GUIRegisterMsg($WM_NOTIFY,			"")
	GUIRegisterMsg($WM_DROPFILES, 		"")
	GUIRegisterMsg($WM_COMMAND, 		"")
	GUIRegisterMsg($WM_MOVE,			"")
	GUIRegisterMsg($WM_PAINT,			"")
	GUIRegisterMsg($WM_CTLCOLORLISTBOX, "")

	_WinAPI_DeleteObject($G_HBRUSH_Light)
	_WinAPI_DeleteObject($G_HBRUSH_SemiDark)
	_WinAPI_DeleteObject($G_HBRUSH_Dark)
	_WinAPI_DeleteObject($G_HBRUSH_SuperDark)
	_WinAPI_DeleteObject($G_HFONT_LV_Font)

    _WinAPI_RemoveWindowSubclass(GUICtrlGetHandle($g_hDllList), $ph_GUI_LV_SubclassProc, 1)
	DllCallbackFree($h_GUI_LV_SubclassProc)

	DllClose($h_Comctl32_DLL)
	DllClose($h_User32_dll)
	DllClose($g_kernel32_dll)

	_GUIImageList_Destroy($h_P_ProcIcon)

	_PopUpMenu_Delete($h_PM_DllList_Sel[1])
	_PopUpMenu_Delete($h_PM_DllList_Sel[0])
	_PopUpMenu_Delete($h_PM_DllList_All[1])
	_PopUpMenu_Delete($h_PM_DllList_All[0])

	GUISetState(@SW_HIDE)

	GUIDelete($h_G_AdvSettings)
	GUIDelete($h_GUI)

EndFunc   ;==>CloseGUI

Func UpdateCursor()

	Local $CursorInfo = GUIGetCursorInfo($h_GUI)

	If (NOT @error) Then
		If (WinActive($h_GUI) AND $CursorInfo[0] >= 130 AND $CursorInfo[0] <= 151 AND $CursorInfo[1] >= 132 AND $CursorInfo[1] <= 152) Then
			$l_HoverProcIcon = True
		Else
			$l_HoverProcIcon = False
		EndIf
	EndIf

	If ($l_HoverProcIcon <> $l_HoverProcIconPrev) Then
		If ($l_HoverProcIcon = True) Then
			Local $CursorPos = MouseGetPos()
			ToolTip($g_ExePath, $CursorPos[0], $CursorPos[1])
		Else
			ToolTip("")
		EndIf
		$l_HoverProcIconPrev = $l_HoverProcIcon
	EndIf

EndFunc   ;==>UpdateCursor

Func AddFile($Path, $UpdateLastDirectory = False)

	If (NOT StringInStr($Path, ".dll") AND NOT StringInStr($Path, ".exe")) Then
		Return
	EndIf

	$DllCount = _GUICtrlListView_GetItemCount($g_hDllList)
	For $i = 0 To $DllCount Step 1
		$currPath = _GUICtrlListView_GetItemText($g_hDllList, $i, 2)
		If (NOT StringCompare($Path, $currPath)) Then
			MsgBox($MB_ICONERROR, $Path, "This file is already in the list.")
			Return
		EndIf
	Next

	SetError(0)
	$Architecture = GetFileArchitecture($Path)
	If (@error) Then
		$err = @error
		SetError(0)

		Switch $err
			Case 1
				MsgBox($MB_ICONERROR, "Invalid MZ header: 0x" & Hex($Architecture), $Path)
				Return

			Case 2
				MsgBox($MB_ICONERROR, "Invalid PE signature: 0x" & Hex($Architecture), $Path)
				Return

			Case 3
				MsgBox($MB_ICONERROR, "Architecture not supported: 0x" & Hex($Architecture), $Path)
				Return
		EndSwitch
	EndIf

	Local $Split = StringSplit($Path, "\")
	$Index = _GUICtrlListView_AddItem($g_hDllList, "")
	_GUICtrlListView_AddSubItem($g_hDllList, $Index, $Split[$Split[0]], 1)
	_GUICtrlListView_AddSubItem($g_hDllList, $Index, $Path, 2)
	_GUICtrlListView_AddSubItem($g_hDllList, $Index, $Architecture, 3)
	_GUICtrlListView_AddSubItem($g_hDllList, $Index, 0, 4)

	If ($UpdateLastDirectory = True) Then
		$g_LastDirectory = ""
		For $i = 0 To $Split[0] - 2 Step 1
			$g_LastDirectory = $g_LastDirectory & $Split[$i + 1] & "\"
		Next
	EndIf

EndFunc   ;==>AddFile

Func AddFiles($Path = 0)

	If (NOT IsString($Path)) Then
		$Path = $g_LastDirectory
	EndIf

	$Files = FileOpenDialog("Select dll files", $Path, "Dynamic Link Libraries (*.dll)", $FD_MULTISELECT, '', $h_GUI)
	If (@error) Then
		Return
	EndIf

	$g_LastDirectory = @WorkingDir

	Local $Chars = StringSplit($Files, "|")
	If (@error = 1) Then
		AddFile($Files, True)
		Return
	EndIf

	_GUICtrlListView_BeginUpdate($g_hDllList)

	For $i = 2 To $Chars[0] Step 1
		AddFile($Chars[1] & "\" & $Chars[$i])
	Next

	_GUICtrlListView_EndUpdate($g_hDllList)

EndFunc   ;==>AddFiles

Func UpdateProcessIcon($TargetPID)

    _GUIImageList_Draw($h_P_ProcIcon, $g_DarkThemeEnabled, _WinAPI_GetDC($h_GUI), 132, 132)

	If (NOT StringCompare($g_Processname, "Broihon.exe") OR $g_PID = 1337) Then
	    _GUIImageList_Draw($h_P_ProcIcon, $g_PI_INDEX_LUL, _WinAPI_GetDC($h_GUI), 132, 132)
		$g_ExePath = "Praise Broihon ♥♥♥"
	    Return
    EndIf

	If ($TargetPID <> -1) Then
		$hProc_info = DllCall($g_kernel32_dll, "HANDLE", "OpenProcess", _
			"DWORD", $PROCESS_QUERY_LIMITED_INFORMATION, _
			"INT", 0, _
			"DWORD", $TargetPID _
		)

		If (IsArray($hProc_info) AND $hProc_info[0]) Then

			Local $dllRet = GetProcessExePath($hProc_info)
			If (IsArray($dllRet) AND ($dllRet[0] <> 0)) Then
				$l_ProcIconIndex = $g_PI_INDEX_Valid
				_GUIImageList_Remove($h_P_ProcIcon, $g_PI_INDEX_Valid)
				$g_ExePath = $dllRet[3] & " (" & $l_TargetProcessArchitecture & ")"
				If (_GUIImageList_AddIcon($h_P_ProcIcon, $dllRet[3], 0, True) = -1) Then
					$l_ProcIconIndex = $g_PI_INDEX_Invalid
				EndIf
			Else
				$l_ProcIconIndex = $g_PI_INDEX_Inactive
				$g_ExePath = "Can't resolve file path."
			EndIf

			DllCall($g_kernel32_dll, "BOOL", "CloseHandle", _
				"HANDLE", $hProc_info[0] _
			)

		Else
			$l_ProcIconIndex = $g_PI_INDEX_Inactive
			$g_ExePath = "Can't resolve file path."
		EndIf

		If ($l_ProcIconIndex = $g_PI_INDEX_Invalid) Then
			Local $wnd_list = WinList()
			If (NOT @error) Then
				For $i = 1 To $wnd_list[0][0] Step 1
					If (WinGetProcess($wnd_list[$i][1]) = $g_PID) Then
						If (NOT StringCompare("ConsoleWindowClass", _WinAPI_GetClassName($wnd_list[$i][1]))) Then
							$l_ProcIconIndex = $g_PI_INDEX_Console
						EndIf
					EndIf
				Next
			EndIf
		EndIf

		_GUIImageList_Draw($h_P_ProcIcon, $l_ProcIconIndex, _WinAPI_GetDC($h_GUI), 132, 132)

	Else
		$g_ExePath = "No (active) process selected."
		_GUIImageList_Draw($h_P_ProcIcon, $g_PI_INDEX_Inactive, _WinAPI_GetDC($h_GUI), 132, 132)
	EndIf

EndFunc   ;==>UpdateProcessIcon

Func UpdateTargetProcess()

	$l_IgnoreInputChange = True

	$proc_alive = False

	If ($g_PID = 1337 AND NOT $g_ProcessByName) Then
		If (StringCompare($g_Processname, "Broihon.exe")) Then
			$g_Processname = "Broihon.exe"
			_GUICtrlComboBox_SetEditText($h_C_ProcName, $g_Processname)
		EndIf

	ElseIf (NOT StringCompare($g_Processname, "Broihon.exe") AND $g_ProcessByName) Then
		If ($g_PID <> 1337) Then
			$g_PID = 1337
			GUICtrlSetData($h_I_PID, $g_PID)
		EndIf

	ElseIf ($g_ProcessByName) Then
		$g_Processname = _GUICtrlComboBox_GetEditText($h_C_ProcName)
		$g_PID = ProcessExists($g_Processname)
		If ($g_PID <> 0) Then
			$index = _GUICtrlComboBox_FindString($h_C_ProcName, $g_Processname)
			If ($index = -1) Then
				_GUICtrlComboBox_AddString($h_C_ProcName, $g_Processname)
				$g_ProcessnameList = _GUICtrlComboBox_GetList($h_C_ProcName)
			EndIf
			$proc_alive = True
		EndIf
		GUICtrlSetData($h_I_PID, $g_PID)

	Else
		If (GUICtrlRead($h_I_PID) <> $g_PID) Then
			GUICtrlSetData($h_I_PID, $g_PID)
		EndIf

		$g_Processname = _ProcessGetName($g_PID)

		If (@error) Then
			$g_Processname = "Invalid PID"
			_GUICtrlComboBox_SetEditText($h_C_ProcName, $g_Processname)
		Else
			$proc_alive = True
			$index = _GUICtrlComboBox_FindString($h_C_ProcName, $g_Processname)
			If ($index = -1) Then
				$index = _GUICtrlComboBox_AddString($h_C_ProcName, $g_Processname)
				$g_ProcessnameList = _GUICtrlComboBox_GetList($h_C_ProcName)
			EndIf
			_GUICtrlComboBox_SetCurSel($h_C_ProcName, $index)
		EndIf
	EndIf

	$Arch = GetProcessArchitecture($g_PID)
	If (IsString($Arch)) Then
		$l_TargetProcessArchitecture = $Arch
	EndIf

	If ($proc_alive) Then
		UpdateProcessIcon($g_PID)
		$l_ProcessAlive = True
	Else
		UpdateProcessIcon(-1)
		$l_ProcessAlive = False
	EndIf

	$l_IgnoreInputChange = False

EndFunc   ;==>UpdateTargetProcess

Func CheckProcess()

	If ($g_PID = 1337 AND NOT $g_ProcessByName AND StringCompare($g_Processname, "Broihon.exe")) Then
		Return False
	EndIf

	If ($g_ProcessByName) Then
		If (NOT ProcessExists($g_Processname)) Then
			Return False
		EndIf
	ElseIf (NOT ProcessExists($g_PID)) Then
		Return False
	EndIf

	Return True

EndFunc   ;==>CheckProcess

Func UpdateGUI()

	If ($l_DoubleClickedDll <> -1) Then
		$filepath 	= _GUICtrlListView_GetItemText($g_hDllList, $l_DoubleClickedDll, 2)
		$pos 		= StringInStr($filepath, "\", $STR_NOCASESENSE, -1)
		$filepath 	= StringTrimRight($filepath, StringLen($filepath) - $pos + 1)
		AddFiles($filepath)
		$l_DoubleClickedDll = -1
	EndIf

	If ($l_AutoComplete AND BitAND(DllCall($h_User32_dll, "SHORT", "GetAsyncKeyState", "int", $VK_RETURN)[0], 0x8000)) Then
		$l_AutoComplete = False

		$l_IgnoreInputChange = True
		$sInputText = _GUICtrlComboBox_GetEditText($h_C_ProcName)
		_GUICtrlComboBox_SetEditText($h_C_ProcName, $sInputText)
		$l_IgnoreInputChange = False

		UpdateTargetProcess()
	EndIf

	$current_tick = GetTickCount()
	If ($current_tick - $last_tick_250 > 250) Then
		$b_check_process = CheckProcess()
		If (($b_check_process AND NOT $l_ProcessAlive) OR $l_UpdateProcess) Then
			UpdateTargetProcess()
			$l_UpdateProcess = False
		ElseIf (NOT $b_check_process AND $l_ProcessAlive) Then
			UpdateTargetProcess()
		EndIf

		UpdateCursor()

		$last_tick_250 = $current_tick
	EndIf

	$info = GUIGetCursorInfo($h_GUI)

	If ($info[4] = $g_hDllList) Then
		If ($info[1] - $g_LV_XY[1] < 23) Then
			$x_buffer 	= $g_LV_XY[0]
			$index 		= 0

			For $i = 0 To 3 Step 1
				If ($x_buffer > $info[0]) Then
					$index = $i
					ExitLoop
				EndIf
				$x_buffer += $g_DllList_ColumnWidth[$i]
			Next

			If ($index <> $g_LV_PrevHoverIndex) Then
				_WinAPI_RedrawWindow($g_h_DllListHeader)
				$g_LV_PrevHoverIndex = $index
			EndIf
		EndIf
	EndIf

	If ($info[4] = $h_B_Close) Then
		If ($info[2] AND NOT $b_ClickClose) Then
			$b_ClickClose = True
			GUICtrlSetColor($h_B_Close, 0xFFFFFF)
			GUICtrlSetBkColor($h_B_Close, 0xF1707A)

			While ($info[4] = $h_B_Close AND $info[2])
				$info = GUIGetCursorInfo($h_GUI)
				Sleep(10)
			WEnd

			If (NOT $info[2]) Then
				Return $GUI_EXIT
			Else
				$b_HoverClose = False
				$b_ClickClose = False
				GUICtrlSetColor($h_B_Close, 0xD0D0D0)
				GUICtrlSetBkColor($h_B_Close, 0x2D2D2D)
			EndIf
		ElseIf (NOT $b_HoverClose) Then
			$b_HoverClose = True
			$b_ClickClose = False
			GUICtrlSetColor($h_B_Close, 0xFFFFFF)
			GUICtrlSetBkColor($h_B_Close, 0xE81123)
		EndIf
	ElseIf ($b_HoverClose OR $b_ClickClose) Then
		$b_HoverClose = False
		$b_ClickClose = False
		GUICtrlSetColor($h_B_Close, 0xD0D0D0)
		GUICtrlSetBkColor($h_B_Close, 0x2D2D2D)
	EndIf

	If ($info[4] = $h_B_Minimize) Then
		If ($info[2] AND NOT $b_ClickMinimize) Then
			$b_ClickMinimize = True
			GUICtrlSetColor($h_B_Minimize, 0xFFFFFF)
			GUICtrlSetBkColor($h_B_Minimize, 0x888888)

			While ($info[4] = $h_B_Minimize AND $info[2])
				$info = GUIGetCursorInfo($h_GUI)
				Sleep(10)
			WEnd

			If (NOT $info[2]) Then
				GUISetState(@SW_MINIMIZE, $h_GUI)
			Else
				$b_HoverMinimize = False
				$b_ClickMinimize = False
				GUICtrlSetColor($h_B_Minimize, 0xD0D0D0)
				GUICtrlSetBkColor($h_B_Minimize, 0x2D2D2D)
			EndIf
		ElseIf (NOT $b_HoverMinimize) Then
			$b_HoverMinimize = True
			$b_ClickMinimize = False
			GUICtrlSetColor($h_B_Minimize, 0xFFFFFF)
			GUICtrlSetBkColor($h_B_Minimize, 0x666666)
		EndIf
	ElseIf ($b_HoverMinimize OR $b_ClickMinimize) Then
		$b_HoverMinimize = False
		$b_ClickMinimize = False
		GUICtrlSetColor($h_B_Minimize, 0xD0D0D0)
		GUICtrlSetBkColor($h_B_Minimize, 0x2D2D2D)
	EndIf

	If ($g_DllList_HoverHeader <> 0) Then
		_WinAPI_RedrawWindow($g_h_DllListHeader)
	EndIf

	$msg = GUIGetMsg($h_GUI)
	Switch $msg
		Case $GUI_EVENT_CLOSE
			Local $new_pos = WinGetPos($h_GUI)
			$g_MainGUI_X = $new_pos[0]
			$g_MainGUI_Y = $new_pos[1]
			Return $GUI_EXIT

		Case $GUI_EVENT_MINIMIZE
			GUISetState(@SW_MINIMIZE, $h_GUI)

	    Case $h_D_SelAll
			If (_WinAPI_GetFocus() = GUICtrlGetHandle($g_hDllList)) Then
				UpdateLV($g_hDllList, $A_ID_SelectAll)
			EndIf

	   	Case $h_B_SelProcess
			$l_ProcessListActive = True
			$newPID = CreateProcessList($h_GUI, $g_DarkThemeEnabled)
			$l_ProcessListActive = False

			If ($newPID <> -1) Then
				$g_PID = $newPID
				GUICtrlSetState($h_R_ProcName, $GUI_UNCHECKED)
				GUICtrlSetState($h_R_PID, $GUI_CHECKED)
				GUICtrlSetState($h_C_ProcName, $GUI_DISABLE)
				GUICtrlSetState($h_I_PID, $GUI_ENABLE)
				$g_ProcessByName = False
				UpdateTargetProcess()
			EndIf

		Case $h_B_Add
			AddFiles()

		Case $h_B_Remove
			UpdateLV($g_hDllList, $A_ID_Delete, $M_Selected)

		Case $GUI_EVENT_DROPPED
			If ($DropFileBuffer[0]) Then
				For $i = 1 To $DropFileBuffer[0]
					AddFile($DropFileBuffer[$i])
				Next
			EndIf

		Case $g_hDllList

			$State = GUICtrlGetState($g_hDllList)

			If ($State = 0) Then
				$count = _GUICtrlListView_GetItemCount($g_hDllList)
				For $i = 0 To $count - 1 Step 1
					$is_checked = _GUICtrlListView_GetItemChecked($g_hDllList, $i)
				    If ($is_checked) Then
				       _GUICtrlListView_SetItemText($g_hDllList, $i, 1, 4)
				    Else
				       _GUICtrlListView_SetItemText($g_hDllList, $i, 0, 4)
				    EndIf
				Next
				_GUICtrlListView_BeginUpdate($g_hDllList)
				_GUICtrlListView_SimpleSort($g_hDllList, $g_DllList_SortSense, 4, True)
				_GUICtrlListView_EndUpdate($g_hDllList)
			Else
				_GUICtrlListView_BeginUpdate($g_hDllList)
				_GUICtrlListView_SimpleSort($g_hDllList, $g_DllList_SortSense, $State, True)
				_GUICtrlListView_EndUpdate($g_hDllList)
			EndIf

		Case $h_B_Reset
			Return $GUI_RESET

		Case $h_B_SwitchTheme
			If ($g_DarkThemeEnabled) Then
				UpdateTheme(False)
			Else
				UpdateTheme(True)
			EndIf

		Case $h_R_ProcName
			If ((GUICtrlRead($h_R_ProcName) = $GUI_CHECKED) AND  (GUICtrlGetState($h_I_PID) <> $GUI_DISABLE)) Then
				GUICtrlSetState($h_I_PID, $GUI_DISABLE)
				GUICtrlSetState($h_C_ProcName, $GUI_ENABLE)
				$g_ProcessByName = True
				$g_Processname = GUICtrlRead($h_C_ProcName)
			EndIf

			$l_UpdateProcess = True

		Case $h_R_PID
			If ((GUICtrlRead($h_R_PID) = $GUI_CHECKED) AND  (GUICtrlGetState($h_C_ProcName) <> $GUI_DISABLE)) Then
				GUICtrlSetState($h_C_ProcName, $GUI_DISABLE)
				GUICtrlSetState($h_I_PID, $GUI_ENABLE)
				$g_ProcessByName = False
				$g_PID = GUICtrlRead($h_I_PID)
			EndIf

			$l_UpdateProcess = True

		Case $h_C_CloseAI
			If (GUICtrlRead($h_C_CloseAI) = $GUI_CHECKED) Then
				$g_CloseAfterInjection = True
			Else
				$g_CloseAfterInjection = False
			EndIf

		Case $h_C_AutoI
			If (GUICtrlRead($h_C_AutoI) = $GUI_CHECKED) Then
				$g_AutoInjection = True
			Else
				$g_AutoInjection = False
			EndIf

		Case $h_C_Method
			$g_InjectionMethod = _GUICtrlComboBox_GetCurSel($h_C_Method)

			If ($g_InjectionMethod = 0) Then
				If (GUICtrlGetState($h_C_Shift) <> $GUI_DISABLE) Then
					GUICtrlSetState($h_L_Unlink, $GUI_DISABLE)
					GUICtrlSetState($h_C_Unlink, $GUI_ENABLE)

					GUICtrlSetState($h_C_Shift, BitOR($GUI_DISABLE, $GUI_UNCHECKED))
					GUICtrlSetState($h_C_Clean, BitOR($GUI_DISABLE, $GUI_UNCHECKED))
					GUICtrlSetState($h_L_Shift, $GUI_ENABLE)
					GUICtrlSetState($h_L_Clean, $GUI_ENABLE)

					If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
						$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_SHIFT_MODULE)
					EndIf
					If (BitAND($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)) Then
						$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)
					EndIf
				EndIf
			ElseIf ($g_InjectionMethod = 1) Then
				If (GUICtrlGetState($h_C_Shift) <> $GUI_DISABLE) Then
					GUICtrlSetState($h_L_Unlink, $GUI_DISABLE)
					GUICtrlSetState($h_C_Unlink, $GUI_ENABLE)

					GUICtrlSetState($h_C_Shift, BitOR($GUI_DISABLE, $GUI_UNCHECKED))
					GUICtrlSetState($h_C_Clean, BitOR($GUI_DISABLE, $GUI_UNCHECKED))
					GUICtrlSetState($h_L_Shift, $GUI_ENABLE)
					GUICtrlSetState($h_L_Clean, $GUI_ENABLE)

					If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
						$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_SHIFT_MODULE)
					EndIf
					If (BitAND($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)) Then
						$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)
					EndIf
				EndIf
			ElseIf ($g_InjectionMethod = 2) Then
				If (GUICtrlGetState($h_C_Shift) <> $GUI_ENABLE) Then

					GUICtrlSetState($h_L_Shift, $GUI_DISABLE)
					GUICtrlSetState($h_L_Clean, $GUI_DISABLE)
					GUICtrlSetState($h_C_Shift, $GUI_ENABLE)
					GUICtrlSetState($h_C_Clean, $GUI_ENABLE)

					GUICtrlSetState($h_C_Unlink, BitOR($GUI_CHECKED, $GUI_DISABLE))
					GUICtrlSetState($h_L_Unlink, $GUI_ENABLE)

					$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)
				EndIf
			EndIf

		Case $h_C_HijackHandle
			If (GUICtrlRead($h_C_HijackHandle) = $GUI_CHECKED) Then
				If (NOT BitAND($g_InjectionFlags, $INJ_HIJACK_HANDLE)) Then
					$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_HIJACK_HANDLE)
				EndIf
			Else
				If (BitAND($g_InjectionFlags, $INJ_HIJACK_HANDLE)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_HIJACK_HANDLE)
				EndIf
			EndIf

		Case $h_C_LaunchMethod
			$g_LaunchMethod = _GUICtrlComboBox_GetCurSel($h_C_LaunchMethod)
			If (($g_LaunchMethod) AND (BitAND(GUICtrlGetState($h_C_CloakThread), $GUI_ENABLE))) Then
				GUICtrlSetState($h_C_CloakThread, BitOR($GUI_UNCHECKED, $GUI_DISABLE))
				GUICtrlSetState($h_L_CloakThread, $GUI_ENABLE)
				If (BitAND($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)
				EndIf
			ElseIf (($g_LaunchMethod = 0) AND (BitAND(GUICtrlGetState($h_C_CloakThread), $GUI_DISABLE))) Then
				GUICtrlSetState($h_L_CloakThread, $GUI_DISABLE)
				GUICtrlSetState($h_C_CloakThread, $GUI_ENABLE)
			EndIf

		Case $h_C_CloakThread
			If (GUICtrlRead($h_C_CloakThread) = $GUI_CHECKED) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)
			ElseIf (BitAND($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)) Then
				$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)
			EndIf

		Case $h_C_Header
			$HeaderOption = _GUICtrlComboBox_GetCurSel($h_C_Header)
			If (BitAND($g_InjectionFlags, $INJ_ERASE_HEADER)) Then
				$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_ERASE_HEADER)
			EndIf
			If (BitAND($g_InjectionFlags, $INJ_FAKE_HEADER)) Then
				$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_FAKE_HEADER)
			EndIf

			If ($HeaderOption = 1) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_ERASE_HEADER)
			ElseIf ($HeaderOption = 2) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_FAKE_HEADER)
			EndIf

		Case $h_C_RandomizeName
			If (GUICtrlRead($h_C_RandomizeName) = $GUI_CHECKED) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_SCRAMBLE_DLL_NAME)
			ElseIf (BitAND($g_InjectionFlags, $INJ_SCRAMBLE_DLL_NAME)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_SCRAMBLE_DLL_NAME)
			EndIf

		Case $h_B_AdvSettings

			$pos = WinGetPos($h_GUI)
			WinMove($h_G_AdvSettings, "", $pos[0] + 15, $pos[1] + 285)
			GUISetState(@SW_SHOW, $h_G_AdvSettings)

			While (True)

				$Msg2 = GUIGetMsg($h_G_AdvSettings)

				If (_WinAPI_GetForegroundWindow() <> $h_G_AdvSettings) Then
					$Msg2 = $GUI_EVENT_CLOSE
				EndIf

				Switch $Msg2
					Case $h_C_Shift
						If (GUICtrlRead($h_C_Shift) = $GUI_CHECKED) Then
							$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_SHIFT_MODULE)
						Else
							If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
								$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_SHIFT_MODULE)
							EndIf
						EndIf

					Case $h_C_Clean
						If (GUICtrlRead($h_C_Clean) = $GUI_CHECKED) Then
							$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)
						Else
							If (BitAND($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)) Then
								$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)
							EndIf
						EndIf

					Case $h_C_Unlink
						If (GUICtrlRead($h_C_Unlink) = $GUI_CHECKED) Then
							$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)
						Else
							If (BitAND($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)) Then
								$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)
							EndIf
						EndIf

					Case $GUI_EVENT_CLOSE
						GUISetState(@SW_HIDE, $h_G_AdvSettings)
						ExitLoop

				EndSwitch

				Sleep(10)

			WEnd

		Case $h_C_LoadCopy
			If (GUICtrlRead($h_C_LoadCopy) = $GUI_CHECKED) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_LOAD_DLL_COPY)
			Else
				If (BitAND($g_InjectionFlags, $INJ_LOAD_DLL_COPY)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_LOAD_DLL_COPY)
				EndIf
			EndIf

		Case $h_B_Inject
			Return $GUI_INJECT

		Case $h_L_Version
			If (BitAND(DllCall($h_User32_dll, "SHORT", "GetAsyncKeyState", "int", $VK_CONTROL)[0], 0x8000)) Then
				Return $GUI_FORCE_UPDATE
			Else
				Return $GUI_UPDATE
			EndIf

		Case $h_B_Help
			ShellExecute("https://www.guidedhacking.com/ghinjector")

		Case $h_B_Changelog
			ShellExecute("https://www.pastebin.com/eN7KPX3x")

		Case $h_B_ToggleTips
			If ($g_ToolTipsOn = True) Then
				GUICtrlSetData($h_B_ToggleTips, "Enable tooltips")
				_GUIToolTip_Deactivate($h_T_TooltipCtrl)
				$g_ToolTipsOn = False
			Else
				GUICtrlSetData($h_B_ToggleTips, "Disable tooltips")
				_GUIToolTip_Activate($h_T_TooltipCtrl)
				$g_ToolTipsOn = True
			EndIf

	EndSwitch

	Return $GUI_RETURN

EndFunc   ;==>UpdateGUI