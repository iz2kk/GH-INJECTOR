#include "pch.h"

#ifdef _WIN64

#include "Manul Mapping.h"
#pragma comment (lib, "Psapi.lib")

BYTE ManualMap_Shell_WOW64[]	= 
{ 
	0x55, 0x8B, 0xEC, 0x8B, 0x4D, 0x08, 0x83, 0xEC, 0x18, 0x85, 0xC9, 0x0F, 0x84, 0x85, 0x02, 0x00, 0x00, 0x83, 0x79, 0x04, 0x00, 0x0F, 0x84, 0x7B, 0x02, 0x00, 0x00, 0x8B, 0x41, 0x08, 0x53, 0x8B, 0x59, 0x0C, 
	0x56, 0x57, 0x89, 0x45, 0xF8, 0x8B, 0x7B, 0x3C, 0x8B, 0x41, 0x10, 0x03, 0xFB, 0x89, 0x45, 0xFC, 0x89, 0x7D, 0xEC, 0x8B, 0x47, 0x28, 0x03, 0xC3, 0x83, 0xBF, 0x84, 0x00, 0x00, 0x00, 0x00, 0x89, 0x45, 0xE8, 
	0x74, 0x6E, 0x8B, 0xB7, 0x80, 0x00, 0x00, 0x00, 0x03, 0xF3, 0x89, 0x75, 0xF4, 0x8B, 0x46, 0x0C, 0x85, 0xC0, 0x74, 0x5C, 0x03, 0xC3, 0x50, 0x8B, 0x41, 0x04, 0xFF, 0xD0, 0x8B, 0x4E, 0x10, 0x8B, 0xD0, 0x8B, 
	0x06, 0x85, 0xC0, 0x89, 0x55, 0xF0, 0x8D, 0x3C, 0x19, 0x0F, 0x45, 0xC8, 0x8B, 0x04, 0x19, 0x8D, 0x34, 0x19, 0x85, 0xC0, 0x74, 0x22, 0x79, 0x05, 0x0F, 0xB7, 0xC0, 0xEB, 0x05, 0x83, 0xC0, 0x02, 0x03, 0xC3, 
	0x50, 0x52, 0xFF, 0x55, 0xF8, 0x8B, 0x55, 0xF0, 0x83, 0xC6, 0x04, 0x89, 0x07, 0x83, 0xC7, 0x04, 0x8B, 0x06, 0x85, 0xC0, 0x75, 0xDE, 0x8B, 0x75, 0xF4, 0x8B, 0x4D, 0x08, 0x83, 0xC6, 0x14, 0x89, 0x75, 0xF4, 
	0x8B, 0x46, 0x0C, 0x85, 0xC0, 0x75, 0xA7, 0x8B, 0x7D, 0xEC, 0x83, 0xBF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x74, 0x25, 0x8B, 0x87, 0xC0, 0x00, 0x00, 0x00, 0x8B, 0x74, 0x18, 0x0C, 0x85, 0xF6, 0x74, 0x17, 0x0F, 
	0x1F, 0x44, 0x00, 0x00, 0x8B, 0x06, 0x85, 0xC0, 0x74, 0x0C, 0x6A, 0x00, 0x6A, 0x01, 0x53, 0xFF, 0xD0, 0x83, 0xC6, 0x04, 0x75, 0xEE, 0x6A, 0x00, 0x6A, 0x01, 0x53, 0xFF, 0x55, 0xE8, 0x8B, 0x45, 0xFC, 0xA8, 
	0x10, 0x0F, 0x84, 0x74, 0x01, 0x00, 0x00, 0x83, 0xBF, 0x84, 0x00, 0x00, 0x00, 0x00, 0x74, 0x75, 0x8B, 0x97, 0x80, 0x00, 0x00, 0x00, 0x03, 0xD3, 0x8B, 0x42, 0x0C, 0x85, 0xC0, 0x74, 0x52, 0x0F, 0x1F, 0x00, 
	0x80, 0x3C, 0x18, 0x00, 0x74, 0x05, 0xC6, 0x44, 0x18, 0x01, 0x00, 0x8B, 0x02, 0xC7, 0x42, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x0C, 0x18, 0x85, 0xC0, 0x75, 0x05, 0x8B, 0x4A, 0x10, 0x03, 0xCB, 0x8B, 0x01, 
	0x85, 0xC0, 0x74, 0x1F, 0x78, 0x0E, 0x80, 0x7C, 0x18, 0x02, 0x00, 0x74, 0x0C, 0xC6, 0x44, 0x18, 0x03, 0x00, 0xEB, 0x05, 0x33, 0xC0, 0x66, 0x89, 0x01, 0x8B, 0x41, 0x04, 0x83, 0xC1, 0x04, 0x85, 0xC0, 0x75, 
	0xE1, 0x8B, 0x42, 0x20, 0x83, 0xC2, 0x14, 0x85, 0xC0, 0x75, 0xB1, 0xC7, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xBF, 0xAC, 
	0x00, 0x00, 0x00, 0x00, 0x74, 0x4E, 0x8B, 0x8F, 0xA8, 0x00, 0x00, 0x00, 0x33, 0xC0, 0x03, 0xCB, 0x8B, 0x51, 0x14, 0x03, 0xD3, 0x39, 0x41, 0x10, 0x74, 0x0A, 0xC6, 0x04, 0x10, 0x00, 0x40, 0x3B, 0x41, 0x10, 
	0x75, 0xF6, 0xC7, 0x41, 0x14, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x41, 0x18, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x41, 0x04, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0xA8, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xBF, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x74, 0x2F, 0x8B, 0x87, 0xA0, 0x00, 0x00, 0x00, 0x03, 0xC3, 0x83, 
	0x38, 0x00, 0x74, 0x0E, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x04, 0x83, 0x38, 0x00, 0x75, 0xF2, 0xC7, 0x87, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0xA4, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x83, 0xBF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x74, 0x5B, 0x8B, 0x8F, 0xC0, 0x00, 0x00, 0x00, 0x03, 0xCB, 0x8B, 0x41, 0x0C, 0x85, 0xC0, 0x74, 0x16, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00, 
	0x83, 0x38, 0x00, 0x74, 0x0B, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xC0, 0x04, 0x75, 0xF0, 0xC7, 0x41, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x41, 0x08, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x41, 0x04, 0x00, 
	0x00, 0x00, 0x00, 0xC7, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x8B, 0x45, 0xFC, 0xA8, 0x01, 0x74, 0x19, 0xB9, 0xFE, 0x03, 0x00, 0x00, 0xC7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x8B, 0xF3, 0xC7, 0x43, 0x04, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x7B, 0x08, 0xF3, 0xA5, 
	0x8B, 0x45, 0x08, 0x5F, 0x5E, 0x89, 0x18, 0x8B, 0xC3, 0x5B, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x33, 0xC0, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00
};

DWORD MANUAL_MAPPER_WOW64::AllocateMemory(DWORD & LastWin32Error)
{
	pLocalImageBase = (BYTE*)VirtualAlloc(nullptr, ImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (!pLocalImageBase)
	{
		LastWin32Error = GetLastError();

		return INJ_ERR_OUT_OF_MEMORY_INT;
	}

	if (Flags & INJ_SHIFT_MODULE)
	{
		srand(GetTickCount64() & 0xFFFFFFFF);
		ShiftOffset = ALIGN_UP(rand() % 0x1000 + 0x100, 0x10);
	}

	ULONG_PTR ShellcodeSize = sizeof(ManualMap_Shell_WOW64);

	AllocationSize = ShiftOffset + ImageSize + sizeof(MANUAL_MAPPING_DATA_WOW64) + ShellcodeSize;

	if(Flags & INJ_SHIFT_MODULE)
	{
		pAllocationBase = (BYTE*)VirtualAllocEx(hTargetProcess, nullptr, AllocationSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		if (!pAllocationBase)
		{
			LastWin32Error = GetLastError();

			VirtualFree(pLocalImageBase, 0, MEM_RELEASE);

			return INJ_ERR_OUT_OF_MEMORY_EXT;
		}
	}
	else
	{
		pAllocationBase = (BYTE*)VirtualAllocEx(hTargetProcess, (void*)pLocalOptionalHeader->ImageBase, AllocationSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		if (!pAllocationBase)
		{
			pAllocationBase = (BYTE*)VirtualAllocEx(hTargetProcess, nullptr, AllocationSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
			if (!pAllocationBase || (UINT_PTR)pAllocationBase > 0x7FFFFFFF)
			{
				LastWin32Error = GetLastError();

				VirtualFree(pLocalImageBase, 0, MEM_RELEASE);

				return INJ_ERR_OUT_OF_MEMORY_EXT;
			}
		}
	}

	pTargetImageBase	= pAllocationBase + ShiftOffset;
	pManualMappingData	= pTargetImageBase + ImageSize;
	pShellcode			= pManualMappingData + sizeof(MANUAL_MAPPING_DATA_WOW64);

	return INJ_ERR_SUCCESS;
}

DWORD MANUAL_MAPPER_WOW64::CopyData(DWORD & LastWin32Error)
{
	memcpy(pLocalImageBase, pRawData, pLocalOptionalHeader->SizeOfHeaders);

	auto * pCurrentSectionHeader = IMAGE_FIRST_SECTION(pLocalNtHeaders);
	for (UINT i = 0; i != pLocalFileHeader->NumberOfSections; ++i, ++pCurrentSectionHeader)
	{
		if (pCurrentSectionHeader->SizeOfRawData)
		{
			memcpy(pLocalImageBase + pCurrentSectionHeader->VirtualAddress, pRawData + pCurrentSectionHeader->PointerToRawData, pCurrentSectionHeader->SizeOfRawData);
		}
	}
	
	if (Flags & INJ_SHIFT_MODULE)
	{
		DWORD* pJunk = new DWORD[ShiftOffset / sizeof(DWORD)];
		DWORD SuperJunk = GetTickCount64() & 0xFFFFFFFF;

		for (UINT i = 0; i < ShiftOffset / sizeof(DWORD) - 1; ++i)
		{
			pJunk[i] = SuperJunk;
			SuperJunk ^= (i << (i % 32));
			SuperJunk -= 0x11111111;
		}

		WriteProcessMemory(hTargetProcess, pAllocationBase, pJunk, ShiftOffset, nullptr);

		delete[] pJunk;
	}

	auto LoadFunctionPointer_WOW64 = [=](HINSTANCE hLib, const char * szFunc, void * &pOut)
	{
		if (!GetProcAddressEx_WOW64(hTargetProcess, hLib, szFunc, pOut))
		{
			return false;
		}

		return true;
	};

	HINSTANCE hK32 = GetModuleHandleEx_WOW64(hTargetProcess, TEXT("kernel32.dll"));

	void * pLoadLibraryA = nullptr;
	if (!LoadFunctionPointer_WOW64(hK32, "LoadLibraryA", pLoadLibraryA))
		return INJ_ERR_REMOTEFUNC_MISSING;

	void * pGetProcAddress = nullptr;
	if (!LoadFunctionPointer_WOW64(hK32, "GetProcAddress", pGetProcAddress))
		return INJ_ERR_REMOTEFUNC_MISSING;

	MANUAL_MAPPING_DATA_WOW64 data{ 0 };
	data.pLoadLibraryA		= (DWORD)(ULONG_PTR)pLoadLibraryA;
	data.pGetProcAddress	= (DWORD)(ULONG_PTR)pGetProcAddress;
	data.pModuleBase		= (DWORD)(ULONG_PTR)pTargetImageBase;
	data.Flags				= Flags;


	if (!WriteProcessMemory(hTargetProcess, pManualMappingData, &data, sizeof(data), nullptr))
	{
		LastWin32Error = GetLastError();

		return INJ_ERR_WPM_FAIL;
	}

	DWORD ShellcodeSize = sizeof(ManualMap_Shell_WOW64);
	if (!WriteProcessMemory(hTargetProcess, pShellcode, ManualMap_Shell_WOW64, ShellcodeSize, nullptr))
	{
		LastWin32Error = GetLastError();

		return INJ_ERR_WPM_FAIL;
	}

	return INJ_ERR_SUCCESS;
}

DWORD MANUAL_MAPPER_WOW64::RelocateImage(DWORD & LastWin32Error)
{
	BYTE * LocationDelta = pTargetImageBase - pLocalOptionalHeader->ImageBase;

	if (!LocationDelta)
		return INJ_ERR_SUCCESS;

	if (!pLocalOptionalHeader->DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size)
		return INJ_ERR_IMAGE_CANT_RELOC;

	auto * pRelocData = ReCa<IMAGE_BASE_RELOCATION*>(pLocalImageBase + pLocalOptionalHeader->DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);
	while (pRelocData->VirtualAddress)
	{
		WORD * pRelativeInfo = ReCa<WORD*>(pRelocData + 1);
		for (UINT i = 0; i < ((pRelocData->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD)); ++i, ++pRelativeInfo)
		{
			if (RELOC_FLAG86(*pRelativeInfo))
			{
				ULONG_PTR * pPatch = ReCa<ULONG_PTR*>(pLocalImageBase + pRelocData->VirtualAddress + ((*pRelativeInfo) & 0xFFF));
				*pPatch += ReCa<ULONG_PTR>(LocationDelta) & 0xFFFFFFFF;
			}
		}
		pRelocData = ReCa<IMAGE_BASE_RELOCATION*>(ReCa<BYTE*>(pRelocData) + pRelocData->SizeOfBlock);
	}

	return INJ_ERR_SUCCESS;
}

DWORD MANUAL_MAPPER_WOW64::CopyImage(DWORD & LastWin32Error)
{
	if (!WriteProcessMemory(hTargetProcess, pTargetImageBase, pLocalImageBase, ImageSize, nullptr))
	{
		LastWin32Error = GetLastError();

		return INJ_ERR_WPM_FAIL;
	}

	return INJ_ERR_SUCCESS;
}


DWORD _ManualMap_WOW64(const wchar_t * szDllFile, HANDLE hTargetProc, LAUNCH_METHOD Method, DWORD Flags, HINSTANCE & hOut, DWORD & LastWin32Error)
{
	MANUAL_MAPPER_WOW64 Module{ 0 };
	BYTE * pRawData{ nullptr };

	std::ifstream File(szDllFile, std::ios::binary | std::ios::ate);

	auto FileSize = File.tellg();

	pRawData = new BYTE[static_cast<size_t>(FileSize)];

	if (!pRawData)
	{
		File.close();

		return INJ_ERR_OUT_OF_MEMORY_NEW;
	}

	File.seekg(0, std::ios::beg);
	File.read(ReCa<char*>(pRawData), FileSize);
	File.close();

	Module.hTargetProcess = hTargetProc;

	Module.pRawData			= pRawData;
	Module.pLocalDosHeader	= ReCa<IMAGE_DOS_HEADER*>(Module.pRawData);
	Module.pLocalNtHeaders	= ReCa<IMAGE_NT_HEADERS32*>(Module.pRawData + Module.pLocalDosHeader->e_lfanew);
	Module.pLocalOptionalHeader = &Module.pLocalNtHeaders->OptionalHeader;
	Module.pLocalFileHeader		= &Module.pLocalNtHeaders->FileHeader;
	Module.ImageSize = Module.pLocalOptionalHeader->SizeOfImage;

	Module.Flags = Flags;

	DWORD ret = Module.AllocateMemory(LastWin32Error);
	if(ret != INJ_ERR_SUCCESS)
	{
		delete[] pRawData;

		return ret;
	}

	ret = Module.CopyData(LastWin32Error);
	if(ret != INJ_ERR_SUCCESS)
	{
		VirtualFree(Module.pLocalImageBase, 0, MEM_RELEASE);
		VirtualFreeEx(Module.hTargetProcess, Module.pAllocationBase, 0, MEM_RELEASE);
		delete[] pRawData;

		return ret;
	}

	ret = Module.RelocateImage(LastWin32Error);
	if(ret != INJ_ERR_SUCCESS)
	{
		VirtualFree(Module.pLocalImageBase, 0, MEM_RELEASE);
		VirtualFreeEx(Module.hTargetProcess, Module.pAllocationBase, 0, MEM_RELEASE);
		delete[] pRawData;

		return ret;
	}

	Module.pRawData = nullptr;
	delete[] pRawData;

	ret = Module.CopyImage(LastWin32Error);
	VirtualFree(Module.pLocalImageBase, 0, MEM_RELEASE);
	if(ret != INJ_ERR_SUCCESS)
	{
		VirtualFreeEx(Module.hTargetProcess, Module.pAllocationBase, 0, MEM_RELEASE);

		return ret;
	}

	DWORD remote_ret = 0;
	ret = StartRoutine_WOW64(hTargetProc, ReCa<f_Routine_WOW64>(Module.pShellcode), (DWORD)Module.pManualMappingData, Method, (Flags & INJ_THREAD_CREATE_CLOAKED) != 0, LastWin32Error, remote_ret);
	hOut = (HINSTANCE)(ULONG_PTR)remote_ret;

	if (Method != LM_QueueUserAPC)
	{
		auto zero_size = Module.AllocationSize - (Module.pManualMappingData - Module.pAllocationBase);
		BYTE * zero_bytes = new BYTE[zero_size];
		memset(zero_bytes, 0, zero_size);

		WriteProcessMemory(hTargetProc, Module.pManualMappingData, zero_bytes, zero_size, nullptr);

		delete[] zero_bytes;
	}

	if (Flags & INJ_FAKE_HEADER)
	{
		void * pK32 = ReCa<void*>(GetModuleHandleEx_WOW64(hTargetProc, TEXT("kernel32.dll")));
		if (pK32)
		{
			WriteProcessMemory(hTargetProc, Module.pTargetImageBase, pK32, 0x1000, nullptr);
		}
	}
	else if (Flags & INJ_ERASE_HEADER)
	{
		BYTE zero_bytes[0x1000]{ 0 };
		WriteProcessMemory(hTargetProc, Module.pTargetImageBase, zero_bytes, 0x1000, nullptr);
	}

	return ret;
}

#endif